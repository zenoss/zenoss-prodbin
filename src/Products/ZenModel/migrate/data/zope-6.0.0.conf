#
# This filter should be used for all Zope operational logs.
# For Zope access logs, see z2_access_logs.conf.
#

if [message] == "------" {
    drop { }
}

# assuming if it doesn't start with a number (date) then it is a newline
multiline {
    pattern => "^%{TIMESTAMP_ISO8601} "
    negate => true
    what => "previous"
}

# extract the timestamp, loglevel and logger from the message
grok {
    # Matches lines of the form: 2013-10-31T06:10:54 INFO zen.zenutils.functioncache: initializing FunctionCache
    match => [ "message", "%{TIMESTAMP_ISO8601:datetime} %{WORD:loglevel} %{USERNAME:logger}\:* %{GREEDYDATA:message}" ]
}

mutate {
    # remove literal 'T' from datetime to make parsing in the next step easier
    gsub => [ "datetime", "T", " " ]
}

# This filter parses the datetime field into a time value,
# removes the datetime field from the data, and
# then uses the parsed value as the "@timestamp" for the message.
date {
    match => [ "datetime", "yyyy-MM-dd HH:mm:ss" ]
    remove_field => ["datetime"]
}
