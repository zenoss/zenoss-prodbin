<?xml version="1.0" encoding="ISO-8859-1" ?>

<!--
    Zenoss RelationshipManager export completed on 2024-12-12 16:15:34.090700

    Use ImportRM to import this file.

    For more information about Zenoss, go to http://www.zenoss.com
 -->

<objects version="[Zenoss, version 6.8.0]" export_date="2024-12-12 16:15:34.090700" zenoss_server="5796c8a41fca" >
<object id='/zport/dmd/Processes/Zenoss' module='Products.ZenModel.OSProcessOrganizer' class='OSProcessOrganizer' move='False'>
<property id='zendoc' type='string'>
Base Zenoss daemons
</property>
<property type="text" id="description" mode="w" >
Base Zenoss daemons
</property>
<property visible="True" type="boolean" id="zAlertOnRestart" >
False
</property>
<property visible="True" type="int" id="zFailSeverity" >
4
</property>
<tomanycont id='osProcessClasses'>
<object id='Zope' module='Products.ZenModel.OSProcessClass' class='OSProcessClass' move='False'>
<property id='zendoc' type='string'>
Zope is the web front end for Zenoss
</property>
<property type="string" id="name" mode="w" >
Zope
</property>
<property type="string" id="regex" mode="w" >
.*runzope.*zenoss.*
</property>
<property type="string" id="excludeRegex" mode="w" >
.*(vim|tail|grep|tar|cat|bash).*
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="text" id="description" mode="w" >
Zope is the web front end for Zenoss
</property>
<property type="int" id="sequence" mode="w" >
0
</property>
</object>
<object id='zenactiond' module='Products.ZenModel.OSProcessClass' class='OSProcessClass' move='False'>
<property id='zendoc' type='string'>
Sends out notifications based on triggers
</property>
<property type="string" id="name" mode="w" >
zenactiond
</property>
<property type="string" id="regex" mode="w" >
.*zenactiond.py.*
</property>
<property type="string" id="excludeRegex" mode="w" >
.*(vim|tail|grep|tar|cat|bash).*
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="text" id="description" mode="w" >
Sends out notifications based on triggers
</property>
<property type="int" id="sequence" mode="w" >
1
</property>
</object>
<object id='zencommand' module='Products.ZenModel.OSProcessClass' class='OSProcessClass' move='False'>
<property id='zendoc' type='string'>
Using protocols such as Telnet and SSH, runs a command on the remote machine and parses the results into events and performance metrics.
</property>
<property type="string" id="name" mode="w" >
zencommand
</property>
<property type="string" id="regex" mode="w" >
.*zencommand.py.*
</property>
<property type="string" id="excludeRegex" mode="w" >
.*(vim|tail|grep|tar|cat|bash).*
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="text" id="description" mode="w" >
Using protocols such as Telnet and SSH, runs a command on the remote machine and parses the results into events and performance metrics.
</property>
<property type="int" id="sequence" mode="w" >
2
</property>
</object>
<object id='zeneventd' module='Products.ZenModel.OSProcessClass' class='OSProcessClass' move='False'>
<property type="string" id="name" mode="w" >
zeneventd
</property>
<property type="string" id="regex" mode="w" >
.*zeneventd.py.*
</property>
<property type="string" id="excludeRegex" mode="w" >
.*(vim|tail|grep|tar|cat|bash).*
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
3
</property>
</object>
<object id='zeneventserver' module='Products.ZenModel.OSProcessClass' class='OSProcessClass' move='False'>
<property id='zendoc' type='string'>
The Zenoss event processor.
</property>
<property type="string" id="name" mode="w" >
zeneventserver
</property>
<property type="string" id="regex" mode="w" >
.*zeneventserver.*
</property>
<property type="string" id="excludeRegex" mode="w" >
.*(vim|tail|grep|tar|cat|bash).*
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="text" id="description" mode="w" >
The Zenoss event processor.
</property>
<property type="int" id="sequence" mode="w" >
4
</property>
</object>
<object id='zenhub' module='Products.ZenModel.OSProcessClass' class='OSProcessClass' move='False'>
<property id='zendoc' type='string'>
This daemon provides a stable interface to ZODB, via services that are requested by daemons.
</property>
<property type="string" id="name" mode="w" >
zenhub
</property>
<property type="string" id="regex" mode="w" >
.*zenhub.py.*
</property>
<property type="string" id="excludeRegex" mode="w" >
.*(vim|tail|grep|tar|cat|bash).*
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="text" id="description" mode="w" >
This daemon provides a stable interface to ZODB, via services that are requested by daemons.
</property>
<property type="int" id="sequence" mode="w" >
5
</property>
</object>
<object id='zenjobs' module='Products.ZenModel.OSProcessClass' class='OSProcessClass' move='False'>
<property id='zendoc' type='string'>
An 'at'-style scheduler for running long-running commands.
</property>
<property type="string" id="name" mode="w" >
zenjobs
</property>
<property type="string" id="regex" mode="w" >
.*zenjobs.py.*
</property>
<property type="string" id="excludeRegex" mode="w" >
.*(vim|tail|grep|tar|cat|bash).*
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="text" id="description" mode="w" >
An 'at'-style scheduler for running long-running commands.
</property>
<property type="int" id="sequence" mode="w" >
6
</property>
</object>
<object id='zenmail' module='Products.ZenModel.OSProcessClass' class='OSProcessClass' move='False'>
<property id='zendoc' type='string'>
Listen on the SMTP port (default 25) and convert e-mails into Zenoss events.
</property>
<property type="string" id="name" mode="w" >
zenmail
</property>
<property type="string" id="regex" mode="w" >
.*zenmail.py.*
</property>
<property type="string" id="excludeRegex" mode="w" >
.*(vim|tail|grep|tar|cat|bash).*
</property>
<property type="string" id="replaceRegex" mode="w" >
.*
</property>
<property type="string" id="replacement" mode="w" >
zenmail
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="text" id="description" mode="w" >
Listen on the SMTP port (default 25) and convert e-mails into Zenoss events.
</property>
<property type="int" id="sequence" mode="w" >
7
</property>
</object>
<object id='zenmodeler' module='Products.ZenModel.OSProcessClass' class='OSProcessClass' move='False'>
<property id='zendoc' type='string'>
Model a device using protocols such as WMI, SNMP, SSH.
</property>
<property type="string" id="name" mode="w" >
zenmodeler
</property>
<property type="string" id="regex" mode="w" >
.*zenmodeler.py.*
</property>
<property type="string" id="excludeRegex" mode="w" >
.*(vim|tail|grep|tar|cat|bash).*
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="text" id="description" mode="w" >
Model a device using protocols such as WMI, SNMP, SSH.
</property>
<property type="int" id="sequence" mode="w" >
8
</property>
</object>
<object id='zenperfsnmp' module='Products.ZenModel.OSProcessClass' class='OSProcessClass' move='False'>
<property id='zendoc' type='string'>
SNMP performance metric poller daemon
</property>
<property type="string" id="name" mode="w" >
zenperfsnmp
</property>
<property type="string" id="regex" mode="w" >
.*zenperfsnmp.py.*
</property>
<property type="string" id="excludeRegex" mode="w" >
.*(vim|tail|grep|tar|cat|bash).*
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="text" id="description" mode="w" >
SNMP performance metric poller daemon
</property>
<property type="int" id="sequence" mode="w" >
9
</property>
</object>
<object id='zenping' module='Products.ZenModel.OSProcessClass' class='OSProcessClass' move='False'>
<property id='zendoc' type='string'>
IPv4 and IPv6 ICMP ECHO sending daemon
</property>
<property type="string" id="name" mode="w" >
zenping
</property>
<property type="string" id="regex" mode="w" >
.*zenping.py.*
</property>
<property type="string" id="excludeRegex" mode="w" >
.*(vim|tail|grep|tar|cat|bash).*
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="text" id="description" mode="w" >
IPv4 and IPv6 ICMP ECHO sending daemon
</property>
<property type="int" id="sequence" mode="w" >
10
</property>
</object>
<object id='zenpop3' module='Products.ZenModel.OSProcessClass' class='OSProcessClass' move='False'>
<property id='zendoc' type='string'>
Connect to a POP3 server and convert any messages into Zenoss events.
</property>
<property type="string" id="name" mode="w" >
zenpop3
</property>
<property type="string" id="regex" mode="w" >
.*zenpop3.py.*
</property>
<property type="string" id="excludeRegex" mode="w" >
.*(vim|tail|grep|tar|cat|bash).*
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="text" id="description" mode="w" >
Connect to a POP3 server and convert any messages into Zenoss events.
</property>
<property type="int" id="sequence" mode="w" >
11
</property>
</object>
<object id='zenprocess' module='Products.ZenModel.OSProcessClass' class='OSProcessClass' move='False'>
<property id='zendoc' type='string'>
SNMP based daemon that gathers process information, and based on what has been modeled, reports on process metrics such as memory and CPU utilization.
</property>
<property type="string" id="name" mode="w" >
zenprocess
</property>
<property type="string" id="regex" mode="w" >
.*zenprocess.py.*
</property>
<property type="string" id="excludeRegex" mode="w" >
.*(vim|tail|grep|tar|cat|bash).*
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="text" id="description" mode="w" >
SNMP based daemon that gathers process information, and based on what has been modeled, reports on process metrics such as memory and CPU utilization.
</property>
<property type="int" id="sequence" mode="w" >
12
</property>
</object>
<object id='zenstatus' module='Products.ZenModel.OSProcessClass' class='OSProcessClass' move='False'>
<property id='zendoc' type='string'>
A daemon that opens a TCP connection to the remote service to determine if it is available.
</property>
<property type="string" id="name" mode="w" >
zenstatus
</property>
<property type="string" id="regex" mode="w" >
.*zenstatus.py.*
</property>
<property type="string" id="excludeRegex" mode="w" >
.*(vim|tail|grep|tar|cat|bash).*
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="text" id="description" mode="w" >
A daemon that opens a TCP connection to the remote service to determine if it is available.
</property>
<property type="int" id="sequence" mode="w" >
13
</property>
</object>
<object id='zensyslog' module='Products.ZenModel.OSProcessClass' class='OSProcessClass' move='False'>
<property id='zendoc' type='string'>
Daemon that runs on the syslog ports and converts syslog messages to Zenoss events.
</property>
<property type="string" id="name" mode="w" >
zensyslog
</property>
<property type="string" id="regex" mode="w" >
.*zensyslog.py.*
</property>
<property type="string" id="excludeRegex" mode="w" >
.*(vim|tail|grep|tar|cat|bash).*
</property>
<property type="string" id="replaceRegex" mode="w" >
.*
</property>
<property type="string" id="replacement" mode="w" >
zensyslog
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="text" id="description" mode="w" >
Daemon that runs on the syslog ports and converts syslog messages to Zenoss events.
</property>
<property type="int" id="sequence" mode="w" >
14
</property>
</object>
<object id='zentrap' module='Products.ZenModel.OSProcessClass' class='OSProcessClass' move='False'>
<property id='zendoc' type='string'>
Receive SNMP v1/2c/3 traps, convert using MIB definitions, and turn into Zenoss events.
</property>
<property type="string" id="name" mode="w" >
zentrap
</property>
<property type="string" id="regex" mode="w" >
.*zentrap.py.*
</property>
<property type="string" id="excludeRegex" mode="w" >
.*(vim|tail|grep|tar|cat|bash).*
</property>
<property type="string" id="replaceRegex" mode="w" >
.*
</property>
<property type="string" id="replacement" mode="w" >
zentrap
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="text" id="description" mode="w" >
Receive SNMP v1/2c/3 traps, convert using MIB definitions, and turn into Zenoss events.
</property>
<property type="int" id="sequence" mode="w" >
15
</property>
</object>
</tomanycont>
</object>
</objects>
