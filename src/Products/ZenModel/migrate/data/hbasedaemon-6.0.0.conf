#
# This filter should be used for all HBase and OpenTsdb daemons
#

# assuming if it doesn't start with a timestamp then it is a newline
multiline {
    pattern => "^%{TIMESTAMP_ISO8601} "
    negate => true
    what => "previous"
}

grok {
    break_on_match => true

    # Matches lines of the form:
    #
    #
    # Note that a specialized form of the USERNAME pattern is used to capture 'logger' since java logger may include \"/\" and \"$\"
    # TODO: when we upgrade to a later version of grok, we could use something like this instead:
    #    pattern_definitions => { \"JAVA_LOGGER\",  \"[a-zA-Z0-9._\\$\\-\\/]+\" }
    #    match => [ \"message\", \"...%{JAVA_LOGGER:logger}...\"]
    #
    match => [ "message", "%{TIMESTAMP_ISO8601:datetime}%{SPACE}%{LOGLEVEL:loglevel}%{SPACE}\[%{GREEDYDATA:thread}\]%{SPACE}(?<logger>[a-zA-Z0-9._\$\-\/]+)\:* %{GREEDYDATA:message}" ]
}

mutate {
    # Convert "ss,SSS" to "ss.SSS" in case we hit some older/different logs
    gsub => [ "datetime", "\,", "." ]
}

# This filter parses the datetime field into a time value,
# removes the datetime field from the data, and
# then uses the parsed value as the \"@timestamp\" for the message.
date {
    match => [ "datetime", "yyyy-MM-dd HH:mm:ss.SSS" ]
    remove_field => ["datetime"]
}
