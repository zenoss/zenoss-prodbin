<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
				xmlns:local="*" 
				xmlns:fc="com.adobe.flex.extras.controls.springgraph.*"
                layout="absolute"
                creationComplete="setup()">
	
    <fc:Roamer id="roamer" bottom="0"
               itemRenderer="XMLItemView"
               repulsionFactor="{repulsion.value}"
               maxDistanceFromCurrent="{maxDistanceFromCurrent.value + 2}"
               itemLimit="200"
               autoFit="{autoFit.selected}"
               tidyHistory="true"
               motionThreshold="0.1"
               right="0" left="0" top="0">

        <fc:removeItemEffect>
            <mx:Fade alphaFrom="1" alphaTo="0" duration="500"/>
        </fc:removeItemEffect>

        <fc:addItemEffect>
            <mx:Fade alphaFrom="0" alphaTo="1" duration="500"/>
        </fc:addItemEffect>
    </fc:Roamer>
    <mx:HBox id="config_bar" x="0" y="0" backgroundAlpha="0.8" width="100%"
             backgroundColor="0x444444" verticalAlign="top"
             paddingTop="5" paddingLeft="5" paddingRight="2"
             paddingBottom="2"
             horizontalAlign="left">
        <mx:VBox horizontalAlign="left" paddingTop="2" paddingLeft="10" paddingBottom="3" paddingRight="10">
            <mx:Label text="Selected Device or Network" fontSize="9" textAlign="center"
                      color="#ffffff" height="12"/>
            <mx:TextInput enter="refreshData();" id="objidsearch" fontSize="9" paddingBottom="0"
                          height="21" text="{_nextItemName?_nextItemName:getInitialObject()}" width="150"/>
            <mx:LinkButton label="Go to Status Page" height="15" id="gotobutton"
                           paddingTop="0" paddingLeft="0"
                           fontSize="9" click="goToStatusPage()"/>
        </mx:VBox>
        <mx:VBox>
            <mx:HBox horizontalAlign="left"
                     paddingBottom="3" paddingRight="10" paddingTop="5">
                <mx:Label text="Filter By" fontSize="9" textAlign="right"
                          color="#ffffff" height="15" width="85"/>
                <mx:ComboBox dataProvider="{getOrganizerTypes()}" fontSize="9" height="20"
                             id="filterBy"
                             width="170" enter="refreshData();"
                             change="updateFilterTargets()"/>			
            </mx:HBox>
            <mx:HBox horizontalAlign="left"
                     paddingBottom="3" paddingRight="10">
                <mx:Label id="filterlabel" text="Device Class Filter" fontSize="9" textAlign="right"
                          color="#ffffff" height="15" width="85"/>
                <mx:ComboBox dataProvider="{getOrganizers()}" fontSize="9" height="20"
                             id="organizerfilter"
                             width="170" enter="refreshData();"
                             change="organizerChosen(ComboBox(event.target).selectedItem)"/>
            </mx:HBox>
        </mx:VBox>
        <mx:HBox paddingTop="3">
            <mx:VBox horizontalAlign="center">
                <mx:HSlider width="100" id="maxDistanceFromCurrent"
                            value="2" minimum="1" maximum="4"
                            liveDragging="true" snapInterval="1"/>
                <mx:Label text="Number of Hops" fontSize="9"
                          textAlign="center" color="#ffffff"/>
            </mx:VBox>
            <mx:VBox horizontalAlign="center">
                <mx:HSlider width="100" id="repulsion" value="{roamer.repulsionFactor}" minimum="0.01" maximum="1.0"
                            liveDragging="true"/>
                <mx:Label text="Repulsion" fontSize="9" width="100" textAlign="center"
                          color="#ffffff"/>
            </mx:VBox>
        </mx:HBox>
        <mx:VBox paddingTop="18" paddingLeft="5" paddingRight="5">
            <mx:CheckBox selected="false" id="autoFit" label="Fit to window"
                         fontSize="9" color="#ffffff" change="roamer.refresh()"/>
        </mx:VBox>
        <mx:Spacer width="100%"/>
        <mx:VBox paddingTop="15" paddingRight="10">
            <mx:Button id="fromSmallDataButton" label="Refresh" height="30"
                       click="refreshData();" width="70" fontSize="11"/>
        </mx:VBox>
    </mx:HBox>

    <mx:HTTPService id="initialData"
                    url="/zport/dmd/getXMLEdges"
                    showBusyCursor="true" resultFormat="e4x"
                    fault="badHTTPRequest();"
                    result="gotData(['Node','Edge','fromID','toID'], event)">
        <mx:request>
            <objid>{objidsearch.text?objidsearch.text:_nextItemName}</objid>
            <depth>{maxDistanceFromCurrent.value}</depth>
            <filter>{_selectedClass}</filter>
        </mx:request>
    </mx:HTTPService>
    <mx:HTTPService id="moreData" url="/zport/dmd/getXMLEdges"
                    showBusyCursor="true" resultFormat="e4x"
                    fault="badHTTPRequest();"
                    result="updateData(event)">
        <mx:request>
            <depth>{maxDistanceFromCurrent.value}</depth>
            <objid>{_nextItemName}</objid>
            <filter>{_selectedClass}</filter>
        </mx:request>
    </mx:HTTPService>

    <mx:Script>
		<![CDATA[
		import com.adobe.flex.extras.controls.springgraph.*;
		
		import mx.binding.utils.BindingUtils;
		import mx.controls.Alert;
		import mx.core.FlexGlobals;
		import mx.rpc.events.ResultEvent;

        [Bindable]
        private var _nextItemName:String;
        [Bindable]
        private var _nodeList:XML;
        [Bindable]
        private var _history:Array;
        [Bindable]
        private var _isFullScreen:Boolean = false;
        [Bindable]
        private var _selectedClass:String;
        [Bindable]
        private var _startingObject:String;

        public static function getUrlParam(param:String, deflt:*):* {
            var queryParams:Object = FlexGlobals.topLevelApplication.parameters;
            if (queryParams == null) return deflt;
            var result:*;
            try {
                result = queryParams[param];
            } catch (e:Error) {
                result = deflt;
            }
            if (typeof result == "undefined") {
                result = deflt;
            }
            return result;
        }

        private function handleQueryParams():void {
            objidsearch.text = getUrlParam("root", null) || getInitialObject();
            config_bar.setVisible(getUrlParam("showconfigbar", "true") != "false");
            autoFit.selected = getUrlParam("autofit", "false") != "false";
            maxDistanceFromCurrent.value = getUrlParam("hops", 2);
            roamer.repulsionFactor = getUrlParam("repulsion", 0.5);
            setControlsByPath(getUrlParam("filterby", "/zport/dmd/Devices"));
        }

        public static function startswith(string:String, pattern:String):Boolean {
            return pattern == string.substr(0, pattern.length);
        }

        public static function normalizePath(path:String):String {
            //Turn a path that may or may not start with /zport/dmd or a slash into a full path
            if (startswith(path, "/zport/dmd")) return path;
            if (startswith(path, "/")) path = path.substring(1);
            return "/zport/dmd/" + path;
        }

        private function setControlsByPath(organizer:String):void {
            organizer = normalizePath(organizer);
            var split:Array = organizer.split("/");
            var org:String = "/" + split.slice(4, split.length).join("/");
            var type:String;
            switch (split[3]) {
                case "Locations":
                    type = "Location";
                    break;
                case "Groups":
                    type = "Group";
                    break;
                case "Systems":
                    type = "System";
                    break;
                case "Devices":
                default:
                    type = "Device Class";
                    break;
            }
            var ob:Object;
            for each(ob in filterBy.dataProvider) {
                if (ob == type) {
                    filterBy.selectedItem = ob;
                    break;
                }
            }
            updateFilterTargets();
            for each(ob in organizerfilter.dataProvider) {
                if (ob.label == org) {
                    organizerfilter.selectedItem = ob;
                    break;
                }
            }
            organizerChosen(ob);
        }

        private function organizerChosen(item:Object):void {
            if (null == item || null == item.data) {
                return;
            }
            _selectedClass = item.data;
        }

        private function setup():void {
            BindingUtils.bindSetter(workaround, organizerfilter, "dataProvider");
            handleQueryParams();
            initialData.send();
            roamer.motionThreshold = 0.1;
            roamer.showHistory = true;		
        }

        private function gotData(xmlNames:Array, event:ResultEvent):void {
            roamer.resetHistory();
            roamer.resetShowHide();
            roamer.xmlNames = xmlNames;
            _nodeList = XML(event.result);
            var startobj:String = _nodeList.Start.@name;
            _nodeList.replace('Start', "");
            roamer.setDataProvider(_nodeList, startobj);
            if (roamer.currentItem)
                objidsearch.text = roamer.currentItem.data.@prop;
        }

        private function refreshData():void {
            initialData.send();
        }

        private function updateData(event:ResultEvent):void {
            var mylist:XMLList = XMLList(event.result);
            var startobj:String = mylist.Start.@name;
            var nodelist:XMLList = mylist.Node;
            var edgelist:XMLList = mylist.Edge;
            for each (var item:XML in nodelist) {
                var id:String = item.@id;
                if (roamer.dataProvider.find(id) == null) {
                    _nodeList.appendChild(item);
                }
            }
            for each (var edge:XML in edgelist) {
                _nodeList.appendChild(edge);
            }
            roamer.setDataProvider(_nodeList, startobj);
            objidsearch.text = roamer.currentItem.data.@prop;
        }

        private function badHTTPRequest():void {

        }

        public function itemDoubleClick(event:Event):void {
            if (roamer.dataProvider.numLinks(event.currentTarget.data) <= 1) {
                _nextItemName = event.currentTarget.data.data.@prop;
                moreData.send()
            } else {
                roamer.currentItem = event.currentTarget.data;
                objidsearch.text = event.currentTarget.data.data.@prop;
            }
        }

        public static function getOrganizerTypes():Array {
            return ["Device Class", "Location", "Group", "System"];
        }

        public static function getOrganizers(type:String = "Device Class"):Array {
            var result:Array = [
                {data:"/", label:"/"}
            ];
            if (ExternalInterface.available) {
                result = ExternalInterface.call("getOrganizerList", type);
            }
            return result;
        }

        public function updateFilterTargets():void {
            filterlabel.text = filterBy.value + " Filter";
            organizerfilter.dataProvider = getOrganizers(String(filterBy.value));
            _selectedClass = organizerfilter.selectedItem.data;
        }

        public function getInitialObject():String {
            var initobj:String = ExternalInterface.call("getInitialObjId");
            if (initobj.length < 1) {
                initobj = '192.168.1.0';
            }
            _nextItemName = String(initobj);
            return _nextItemName;
        }

        public function toggleFullScreenMode():void {
            if (ExternalInterface.available) {
                var x:String = ExternalInterface.call("toggleFullScreen");
            }
        }

        /* Access MochiKit's own console log function */
        public function log(msg:String):void {
            if (ExternalInterface.available) {
                ExternalInterface.call("log", msg);
            }
        }

        public function goToStatusPage():void {
            if (objidsearch.text) {
                if (ExternalInterface.available) {
                    ExternalInterface.call("goToDeviceSearch", objidsearch.text);
                }
            }
        }

        private function workaround(dataProvider:Object):void {
            if (null == organizerfilter) {
                return;
            }
            if (null == organizerfilter.dropdown) {
                return;
            }
            organizerfilter.dropdown.dataProvider = dataProvider;
        }
        ]]>
	</mx:Script>
</mx:Application>
