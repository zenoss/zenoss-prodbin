<tal:block metal:define-macro="base">
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.0//EN"
"http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd">
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
        <title>
            <tal:block tal:content="here/dmd/instanceIdentifier"/>:
            <tal:block metal:define-slot="title">
                <tal:block tal:content="here/titleOrId"/>
            </tal:block>
        </title>
        <link rel="shortcut icon"
              href="/zport/dmd/favicon.ico"
              type="image/x-icon"/>
        <link rel="stylesheet" type="text/css"
            href="++resource++extjs/resources/css/ext-all.css"/>
        <link rel="stylesheet" type="text/css"
            href="/++resource++zenui/css/xtheme-zenoss.css" />
        <link rel="stylesheet" type="text/css"
            href="/++resource++zenui/css/zenoss.css" />
        <link rel="stylesheet" type="text/css"
            href="/zport/quickstart.css"/>
        <style tal:condition="python:here.dmd.getProductName()!='core'">
            html {background-color:#eae9dc}
        </style>

        <!--[if lt IE 8]>
        <style>legend {width: 100%} legend span
            {display:block;margin-left:-23px} </style>
        <![endif]-->
        <tal:block tal:content="structure provider:js-security"/>
        <tal:block tal:content="structure provider:all-js"/>


    </head>
    <body><div class="yui-skin-sam">

        <div id="header">
            <div class="logo"></div>
            <div id="header-extra">
                <tal:block metal:define-slot="username">
                </tal:block>
            </div>
        </div>
        <div id="content-wrapper">
            <div id="content">
            <h1><tal:block metal:define-slot="headline"/></h1>
            <h2><tal:block metal:define-slot="subheadline"/></h2>
                <tal:block metal:define-slot="content"/> </div>

            <div id="buttons">
                <tal:block metal:define-slot="buttons">
                    <div style="float:left;">
                    <input type="button" value="< Previous"/>
                    <input type="button" value="Next >"/>
                    </div><div style="float:right;">
                    <input type="button" value="Skip To Dashboard"/>
                </tal:block>
            </div>
        </div>
        <div id="footer">&copy; 2005-2017 Zenoss, Inc.</div>


    </div>
    <script metal:define-slot="extra-scripts">


    </script>
    </body>
</html>
</tal:block>

<tal:block metal:define-macro="deviceAdd">
<style>
    h3.listitem_master { float:left; color: #222; font-weight: normal}
    span.listitem_detail {float:right; color: #666}
</style>
<div id="tabcontrol" style="margin-bottom: 1em;">
    <span style="margin-right:2em;">
    <input type="radio" id="manualradio" checked name="tabselect" />
    <label for="manualradio"> Manually find devices </label>
    </span>
    <input type="radio" id="autoradio" name="tabselect"/> 
    <label for="autoradio">Autodiscover devices</label>
</div>
<hr/>
<div id="deviceadd_tabs"  class="easyadddevice_shell"></div>
<script tal:content="string:
    var DEFAULT_SNMPCOMMUNITIES = ${view/default_communities};
    var DEVICE_TYPES = ${view/device_types};
    var COLLECTORS = ${view/collectors};
"></script>
<script type="text/javascript">
Ext.onReady(function() {
    Ext.QuickTips.init();
    /**
     * In every one of our panels we want border and frame to be false so override it on the base class.
     **/
    Ext.override(Ext.panel.Panel, {
        frame: false,
        border: false
    });
    Ext.form.Field.prototype.msgTarget = 'side';

    var collectorDefinition = {
        xtype: 'combo',
        width: 300,
        // only show if we have multiple collectors
        hidden: COLLECTORS.length == 1,
        fieldLabel: 'Collector',
        queryMode: 'local',
        store: new Ext.data.ArrayStore({
            data: COLLECTORS,
            fields: ['name']
        }),
        valueField: 'name',
        value: 'localhost',
        displayField: 'name',
        forceSelection: true,
        editable: false,
        allowBlank: false,
        triggerAction: 'all',
        listeners: {
            change: function(combo, newValue) {
                // when they add multiple devices default the selection
                // of new rows to the last selected collector
                lastCollector = newValue;
            }
        }
    }, lastCollector = 'localhost';

    Ext.apply(Ext.form.VTypes, {
        iprangeOrNetwork: function(val, field) {
            return isIPv4(val) || isIPv6(val);
        },
        iprangeOrNetworkText: "Please enter a valid IP range or " + "<br/>network with subnet mask.<br/>" + "e.g., 10.1.1.1-50  or 10.1.1.1/24"
    });
    function isIPv4(s){
        var valid = false, split = [];
        if(s.match(/\//g)){
            split = s.split("/");
        }else if(s.match(/\-/g)){
            split = s.split("-");
        }else{
            split.push(s);
        }
        var match = split[0].match(/^(\d+)\.(\d+)\.(\d+)\.(\d+)$/);
        valid = match != null &&
                match[1] <= 255 && match[2] <= 255 &&
                match[3] <= 255 && match[4] <= 255;
        if(valid == true && split[1] != undefined){
            if(split[1].length != 0){
                valid = split[1] <= 255;
            }else{
                valid = false;
            }
        }
        return valid;
    }
    function isIPv6(str){
        return (/^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/.test(str));
    }    
    var closeWindowIfPopup = function(form, action) {
        // opener is defined as the window that opened the popup
        // if this popup is part of quick start step 2, dont close.
        if (!Ext.isEmpty(opener) && !~window.location.href.indexOf("qs-step2")) {
            window.close();
        }
    };

    var netFieldConfig = {
        inputType: 'text',
        name: 'network',
        allowBlank: true,
        vtype: 'iprangeOrNetwork',
        anchor: '95%'
    }

    var devFieldConfig = {
        inputType: 'text',
        name: 'device',
        allowBlank: true,
        enableKeyEvents: true,
        listeners: {
            'blur': function(ob) {
                if (ob.getEl().parent()) {
                    ob.getEl().parent().removeCls('selected_row');
                }
            },
            'focus': function(ob) {
                if (ob.getEl().parent()) {
                    ob.getEl().parent().addCls('selected_row');
                }
                idx = Ext.getCmp('devices').items.indexOf(ob) - 1;
                Ext.getCmp('manual_creds').layout.setActiveItem(idx);
            },
            'valid': function(ob) {
                idx = Ext.getCmp('devices').items.indexOf(ob) - 1;
                cmp = Ext.getCmp('credstitle_' + idx);
                if (cmp) cmp.body.update(ob.getValue() + ' Details');
            }
        }
    }

    var autodiscover = {
        xtype: 'form',
        bodyStyle: 'padding:5px 5px 0',
        id: 'autodiscoverform',
        frame: false,
        border: false,
        layout: 'column',
        buttonAlign: 'left',
        listeners: {
            actioncomplete: {
                fn: function() {
                    closeWindowIfPopup(arguments);
                }
            }
        },
        defaults: {
            columnWidth: 0.5,
            layout: 'anchor',
            frame: false,
            border: false,
            maxWidth: 450
        },
        items: [{
            xtype: 'fieldset',
            id: 'networks',
            title: 'Networks/Ranges',
            layout: {
                type: 'anchor'
            },
            bodyStyle: 'padding:0',
            hideLabels: 'true',
            defaultType: 'textfield',
            // Don't autodestroy, so we can remove/add
            // the button easily
            autoDestroy: false,
            items: [{
                xtype: 'panel',
                border: false,
                cls: 'helptext',
                bodyStyle: 'padding: 5px',
                html: "Enter one or more networks (such " + "as 10.0.0.0/24) or <" + "br/> IP ranges " + "(such as 10.0.0.1-50)."
            }, netFieldConfig, {
                xtype: 'button',
                id: 'add_button',
                text: '+',
                handler: function() {
                    // Get the fieldset
                    nets = Ext.getCmp('networks');
                    // Add a new text field
                    var field = nets.add(netFieldConfig);
                    // pop the button and append it so it
                    // stays on the bottom
                    nets.add(nets.remove(
                        Ext.getCmp('add_button')));
                    // Register the field with the FormPanel
                    form = Ext.getCmp('autodiscoverform').getForm();
                    form.add(field);
                    // Render the new components
                    nets.doLayout();
                    field.focus();
                }
            }]
        },{
            frame: false,
            border: true,
            bodyStyle: 'padding: 5px',
            items: [{
                xtype: 'fieldset',
                id: 'netauth',
                layout: 'anchor',
                borderLeft: true,
                defaults: {
                    anchor: '95%'
                },
                title: 'Authentication',
                frame: false,
                border: false,
                defaultType: 'textfield',
                items: [{
                    xtype: 'panel',
                    border: false,
                    cls: 'helptext',
                    style: 'font-size:1em',
                    bodyStyle: 'padding:5px 0',
                    html: "Specify credentials to be used " + "during the discovery process. Zenoss " + "will apply these to each device it " + "discovers."
                },{
                    xtype: 'panel',
                    border: false,
                    style: 'color:#666;font-weight:bold',
                    bodyStyle: 'padding:5px 0',
                    html: 'Windows'
                },{
                    xtype: 'panel',
                    border: false,
                    cls: 'helptext',
                    style: 'font-size:1em;margin-bottom:0',
                    bodyStyle: 'padding-left:2em;padding-bottom:5px',
                    html: "This user must be a member of the " + "Local Administrators group."
                },{
                    labelStyle: 'padding-left: 20px',
                    fieldLabel: 'Username',
                    name: 'winusername'
                },{
                    labelStyle: 'padding-left: 20px',
                    fieldLabel: 'Password',
                    inputType: 'password',
                    name: 'winpass'
                },{
                    xtype: 'panel',
                    border: false,
                    style: 'color:#666;font-weight:bold',
                    bodyStyle: 'padding:5px 0',
                    html: 'SSH'
                },{
                    labelStyle: 'padding-left: 20px',
                    fieldLabel: 'Username',
                    name: 'sshusername'
                },{
                    labelStyle: 'padding-left: 20px',
                    fieldLabel: 'Password',
                    inputType: 'password',
                    name: 'sshpass'
                },{
                    xtype: 'panel',
                    border: false,
                    style: 'color:#666;font-weight:bold',
                    bodyStyle: 'padding:5px 0',
                    html: 'SNMP'
                },{
                    xtype: 'panel',
                    border: false,
                    cls: 'helptext',
                    style: 'font-size:1em;margin-bottom:0',
                    bodyStyle: 'padding-left:2em;padding-bottom:5px;',
                    html: "Zenoss will try each of these community" + " strings in turn when connecting to the device."
                },{
                    xtype: 'textarea',
                    cls: 'dontexpand',
                    labelStyle: 'padding-left: 20px',
                    fieldLabel: 'Community Strings',
                    name: 'snmpcommunities',
                    value: DEFAULT_SNMPCOMMUNITIES,
                    allowBlank: false
                }, Ext.apply(collectorDefinition, {
                    id: 'autodiscovery_collector',
                    name: 'autodiscovery_collector'
                })]
            }]
        }]
    };

    Ext.define('Zenoss.model.TypeStore', {
        extend: 'Ext.data.Model',
        fields: ['value', 'description', 'protocol', 'shortdesc']

    });
    var devtype_store = Ext.create('Ext.data.Store', {
        storeId: 'devtype_store',
        model: 'Zenoss.model.TypeStore',
        autoLoad: true,
        data: DEVICE_TYPES,
        proxy: {
            type: 'memory',
            reader: {
                type: 'json',
                root: 'types'
            }
        }


    });

    function add_card() {
        var container = Ext.getCmp('manual_creds'),
        index = container.items.length,
        card = container.add({
            xtype: 'panel',
            layout: {
                type: 'anchor'
            },
            frame: false,
            border: false,
            labelAlign: 'right',
            labelWidth: 70,
            defaults: {
                anchor: '95%',
                border: false
            },
            items: [{
                xtype: 'panel',
                id: 'credstitle_' + index,
                cls: 'credstitle',
                style: {
                    'font-weight': 'bold',
                    'font-size': '1.3em',
                    'color': '#666',
                    'padding-bottom': '1em'
                },
                html: 'Details'
            }, Ext.apply(collectorDefinition, {
                id: 'collector_' + index,
                name: 'collector_' + index,
                value: lastCollector
            }),{
                xtype: 'combo',
                id: 'combobox_' + index,
                name: 'deviceclass_' + index,
                queryMode: 'local',
                value: '/Server/Linux_snmp',
                fieldLabel: 'Device Type',
                editable: false,
                store: devtype_store,
                valueField: 'value',
                displayField: 'shortdesc',
                listConfig: {
                    itemSelector: 'div.blah'
                },
                triggerAction: 'all',
                forceSelection: true,
                listeners: {
                    'select': function(ob) {
                        var type = ob.getValue().split('_')[1],
                        types = ['ssh', 'snmp', 'win'],
                        container = Ext.getCmp('creds_' + index),
                        selectCard = function() {
                            var idx = Ext.Array.indexOf(types, type);
                            container.layout.setActiveItem(idx);
                        }
                        if (Ext.isString(container.layout)) {
                            container.on('afterrender', selectCard);
                        } else {
                            selectCard();
                        }
                    }
                }
            },
            {
                xtype: 'panel',
                cls: 'helptext',
                style: 'font-size: 1em',
                border: false,
                html: "If your device type is not listed, use " + "the default selection. You can add devices of " + "different types from the Zenoss dashboard."
            },
            {
                xtype: 'panel',
                anchor: '100%',
                layout: 'card',
                id: 'creds_' + index,
                cls: 'creds_base',
                items: [{
                    anchor: '100%',
                    xtype: 'fieldset',
                    defaults: {
                        anchor: '95%'
                    },
                    id: 'ssh_' + index,
                    cls: 'creds_sub',
                    title: 'SSH Credentials',
                    defaultType: 'textfield',
                    items: [{
                        name: 'sshuser_' + index,
                        fieldLabel: 'Username'
                    },
                    {
                        name: 'sshpass_' + index,
                        inputType: 'password',
                        fieldLabel: 'Password'
                    }]
                },{
                    xtype: 'fieldset',
                    anchor: '100%',
                    defaults: {
                        anchor: '95%'
                    },
                    id: 'snmp_' + index,
                    cls: 'creds_sub',
                    title: 'SNMP Credentials',
                    items: [{
                        xtype: 'panel',
                        border: false,
                        cls: 'helptext',
                        style: 'font-size:1em;margin-bottom:0',
                        bodyStyle: 'padding-bottom:5px',
                        html: "Zenoss will try each of these community" + " strings in turn when connecting to the device."
                    },
                    {
                        xtype: 'textarea',
                        fieldLabel: 'Community Strings',
                        name: 'snmpcomm_' + index,
                        value: DEFAULT_SNMPCOMMUNITIES,
                        allowBlank: false
                    }]
                },
                {
                    xtype: 'fieldset',
                    id: 'win_' + index,
                    cls: 'creds_sub',
                    border: false,
                    title: 'Windows Credentials',
                    defaultType: 'textfield',
                    items: [{
                        xtype: 'panel',
                        border: false,
                        cls: 'helptext',
                        style: 'font-size:1em;margin-bottom:0',
                        bodyStyle: 'padding-left:2em;padding-bottom:5px',
                        html: "This user must be a member of the " + "Local Administrators group."
                    },
                    {
                        name: 'winuser_' + index,
                        fieldLabel: 'Username'
                    },
                    {
                        name: 'winpass_' + index,
                        inputType: 'password',
                        fieldLabel: 'Password'
                    }]
                }]
            }]
        });
        combobox = Ext.getCmp('combobox_' + index);
        container.doLayout();
        combobox.setValue('/Server/Linux_snmp');
        combobox.fireEvent('select', combobox);
    }

    function addDeviceRow() {
        // Get the fieldset
        devs = Ext.getCmp('devices');
        // Add a new text field
        var idx = devs.items.length - 2;
        config = Ext.apply(devFieldConfig, {
            name: 'device_' + idx
        });
        // this line will only allow around 8 adds before it throws the error
        // that 'events' prop is undefined. If the combo box is never selected on the right
        // then this isn't a problem. Strange bug.
        var field = devs.add(config);
        // pop the button and append it so it
        // stays on the bottom
        devs.add(devs.remove(Ext.getCmp('dev_add_button')));
        // Register the field with the FormPanel
        Ext.getCmp('manualdiscoverform', function(mdf) {
            var form = mdf.getForm();
            form.add(field);
            mdf.doComponentLayout();
        });
        // Render the new components
        add_card();
        field.focus();
    }

    var manualdiscover = {
        xtype: 'form',
        id: 'manualdiscoverform',
        layout: {
            type: 'column'
        },
        listeners: {
            actioncomplete: {
                fn: function() {
                    closeWindowIfPopup(arguments);
                }
            }
        },
        defaults: {
            layout: 'anchor',
            frame: false,
            border: false,
            columnWidth: 0.5,
            flex: 1,
            maxWidth: 450
        },
        items: [{
            xtype: 'fieldset',
            id: 'devices',
            title: 'Hostnames/IP Addresses',
            layout: {
                type: 'anchor'
            },
            defaultType: 'textfield',
            autoDestroy: false,
            defaults: {
                anchor: '95%'
            },
            items: [{
                xtype: 'panel',
                cls: 'helptext',
                border: false,
                html: 'Enter a hostname or IP address' + ' for each device you want to add.'
            },
            {
                xtype: 'button',
                anchor: null,
                id: 'dev_add_button',
                text: '+',
                handler: addDeviceRow
            }]
        },
        {
            layout: 'card',
            id: 'manual_creds'
        }]
    };

    var tabpanel = Ext.create('Ext.panel.Panel', {
        autoHeight: true,
        layout: {
            type: 'card'
        },
        renderTo: 'deviceadd_tabs',
        // dockedItems (bbar) do not work on column layouts in extjs4 (hence the complicated panels)
        items: [{
            xtype: 'panel',
            items: [manualdiscover, {
                xtype: 'panel',
                items: [{
                    xtype: 'button',
                    text: 'Save',
                    cls:'step2submit',
                    handler: function() {
                        Ext.getCmp('manualdiscoverform').getForm().submit({
                            url: 'manual_add',
                            success: function(form, action) {
                                window.location = '/zport/dmd/qs-step2';
                            }
                        });
                    }
                }]
            }]
        }, {
            xtype: 'panel',
            items: [autodiscover, {
                xtype: 'panel',
                items: [{
                    xtype: 'button',
                    text: 'Submit',
                    cls:'step2submit',
                    handler: function() {
                        Ext.getCmp('autodiscoverform').getForm().submit({
                            url: 'auto_add',
                            success: function(form, action) {
                                window.location = '/zport/dmd/qs-step2';
                            }
                        });
                    }
                }]
            }]
        }],
        listeners: {
            afterlayout: {
                fn: function() {
                    addDeviceRow();
                },
                single: true
            }
        }
    });

    // Wire up the radio buttons
    var manlradio = Ext.get('manualradio');
    var autoradio = Ext.get('autoradio');

    manlradio.on('click', function() {
        manlradio.dom.checked = true;
        tabpanel.getLayout().setActiveItem(0);
    });

    autoradio.on('click', function() {
        autoradio.dom.checked = true;
        tabpanel.getLayout().setActiveItem(1);
    });

    tabpanel.getLayout().setActiveItem(0);
    tabpanel.getLayout().setActiveItem(1);
    tabpanel.getLayout().setActiveItem(0);
    tabpanel.doLayout();


});


</script>
</tal:block>
