##############################################################################
#
# Copyright (C) Zenoss, Inc. 2017, all rights reserved.
#
# This content is made available according to terms specified in
# License.zenoss under the directory where your Zenoss product is installed.
#
##############################################################################

import logging
import Migrate
import os
import servicemigration as sm
from Products.ZenUtils.Utils import zenPath

log = logging.getLogger("zen.migrate")
sm.require("1.1.5")

class AddRabbitMQGlobalConf(Migrate.Step):
    """
    Add a global.conf to all RabbitMQ services.
    """
    version = Migrate.Version(200, 0, 0)

    def cutover(self, dmd):
        try:
            ctx = sm.ServiceContext()
        except sm.ServiceMigrationError:
            log.info("Couldn't generate service context, skipping.")
            return

        content = """\
# Generated by serviced
{{range $k,$v:=contextFilter . \"global.conf.\"}}{{$k}} {{$v}}\n{{end}}\
"""
        global_conf = sm.ConfigFile(
            name= "/opt/zenoss/etc/global.conf",
            filename= "/opt/zenoss/etc/global.conf",
            owner="zenoss:zenoss",
            permissions="660",
            content=content,
        )

        rabbits = filter(
            lambda s: 'RabbitMQ' in ctx.getServicePath(s),
            ctx.services)

        log.info("Found %i services called 'RabbitMQ' in their service path." %
                 len(rabbits))

        added = 0
        commit = False

        for rabbit in rabbits:
            config_names = [f.name for f in rabbit.originalConfigs]
            if global_conf.name not in config_names:
                rabbit.originalConfigs.append(global_conf)
                rabbit.configFiles.append(global_conf)
                added += 1
                commit = True

        log.info("Added global_conf to %i RabbitMQs." % added)
        if commit:
            ctx.commit()

AddRabbitMQGlobalConf()

