#
# This filter should be used for all RabbitMQ operational logs (rabbit@rbt[0-9]*.log - rabbit@rbt[0-9]*-sasl.log)
#

# If it doesn't start with a "=" then it is part of the same log message
multiline {
    pattern => "^="
    negate => true
    what => "previous"
}

grok {
    # Match this line of the form: "=INFO REPORT==== 2-Aug-2017::14:30:35 ==="
    match => { "message" => "^=%{WORD:loglevel} REPORT==== %{MONTHDAY:day}-%{MONTH:month}-%{YEAR:year}::%{TIME:time} ===.*$" }
}

# interpret message header text as "severity"
mutate {
    gsub => [
      "loglevel", "WARNING", "WARN",
      "loglevel", "CRASH", "ERROR",
      "loglevel", "SUPERVISOR", "ERROR"
    ]

    add_field => {
        "datetime" => "%{month}-%{day}-%{year} %{time}"
    }
    remove_field => [ "month", "day", "time" ]
}

# This filter parses the datetime field into a time value,
# removes the datetime field from the data, and
# then uses the parsed value as the \"@timestamp\" for the message.
date {
    match => [ "datetime", "MMM-dd-yyyy HH:mm:ss" ]
    remove_field => ["datetime"]
}

