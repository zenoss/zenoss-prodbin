#!/usr/bin/env python
##############################################################################
#
# Copyright (C) Zenoss, Inc. 2011, all rights reserved.
#
# This content is made available according to terms specified in
# License.zenoss under the directory where your Zenoss product is installed.
#
##############################################################################

"""Zenoss ZODB storage packing utility.
"""
import sys
from os import path
import tempfile
import argparse
import subprocess

from Products.ZenUtils.Utils import zenPath
from Products.ZenUtils.GlobalConfig import getGlobalConfiguration

from relstorage import zodbpack

def get_config(database=None):
    _global_conf = getGlobalConfiguration()
    if database:
        _global_conf['zodb-db'] = database
    zodb_socket = _global_conf.get('zodb-socket')
    if zodb_socket:
        _global_conf['socket'] = 'unix_socket %s' % zodb_socket
    else:
        _global_conf['socket'] = ''

    config = """
<relstorage>
    pack-gc true
    keep-history false
    <mysql>
        host %(zodb-host)s
        port %(zodb-port)s
        db %(zodb-db)s
        user %(zodb-user)s
        passwd %(zodb-password)s
        %(socket)s
    </mysql>
</relstorage>
""" % _global_conf
    return config


_zodbpack = zenPath('bin', 'zodbpack')

def pack_database(config):
    """
    Write the config file and call zodbpack
    """
    with tempfile.NamedTemporaryFile() as configfile:
        configfile.write(config)
        configfile.flush()
        cmd = [_zodbpack, configfile.name, '-d', str(options.days)]
        if options.buildTablesOnly or options.workers > 0:
            cmd.append("--prepack")
        elif options.usePrePackState:
            cmd.append("--use-prepack-state")
        if not options.legacy:
            from Products.ZenUtils.patches import zodbpackmonkey
            zodbpackmonkey.set_up_logger()
            if options.buildTablesOnly or options.workers >0:
                print("zenossdbpack will only build internal tables. Pack phase will be skipped.")
                zodbpackmonkey.set_external_option("BUILD_TABLES_ONLY")
                if options.workers > 0:
                    zodbpackmonkey.set_external_option("N_WORKERS", options.workers)
            if options.minimizeMemoryUsage:
                print("Running zenossdbpack minimizing memory usage during tree traversal.")
                zodbpackmonkey.set_external_option("MINIMIZE_MEMORY_USAGE")
        return zodbpack.main(cmd)


if __name__ == "__main__":
    for fname in ('.remote_hub', '.remote_collector'):
        if path.isfile(zenPath('var', fname)):
            print "zenossdbpack should not run on a remote system"
            sys.exit(1)

    # Get the days option to forward to zodbpack
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "-d", "--days", dest="days", type=float, default=0.5, # 12 hours
        help="Days to keep unreferenced objects (default: %(default)s). "
        "NOTE: To help prevent PKEs, zenossdbpack will not accept --days below 0.5")
    # -e option is no longer used. Left for compatibility purposes.
    # Many customers have cron jobs passing -e session
    parser.add_argument(
        "-e", "--exclude-db", dest="excludeDB",
        choices=['session', 'zodb'],
        help="Specify which database to exclude")
    parser.add_argument(
        "-l", "--legacy", dest="legacy",
        action="store_true", default=False,
        help="Executes unpatched version of zodbpack. No checks are performed to prevent POSKeyErrors.")
    parser.add_argument(
        "-t", "--build-tables", dest="buildTablesOnly",
        action="store_true", default=False,
        help="Builds internal tables only and does not do the pack.")
    parser.add_argument(
        "-tw", "--workers", dest="workers",
        action="store", default=-1, type=int,
        #help="Build internal tables only using workers."
        help=argparse.SUPPRESS)
    parser.add_argument(
        "-u", "--use-prepack-state", dest="usePrePackState",
        action="store_true", default=False,
        help="Skip the preparation stage and pack. Requires that a pre-pack has been run.")
    parser.add_argument(
        "-m", "--minimize-memory", dest="minimizeMemoryUsage",
        action="store_true", default=False,
        help="Minimize memory usage during tree traversal. NOTE: Use only when zenossdbpack crashes with out of memory error.")
    parser.add_argument(
        "-v", "--version", dest="version",
        action="store_true", default=False,
        help="Prints version of zenossdbpack")

    options = parser.parse_args()
    if options.days < 0.5:
        print "  --days below 0.5 is no longer supported - defaulting to 0.5"
        options.days = 0.5

    if options.version:
        from Products.ZenUtils.patches.zodbpackmonkey import MONKEY_HELPER
        print "\nzenossdbpack version: {0}\n".format(MONKEY_HELPER.VERSION)
        sys.exit(0)

    retcode = 1

    if options.excludeDB != 'zodb':
        # pack the main database
        retcode = pack_database(get_config())
    else:
        print "Skipping zodb"

    sys.exit(retcode)
