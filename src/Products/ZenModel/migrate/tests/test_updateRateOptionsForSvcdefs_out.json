[
  {
     "ID": "2suini94i1jnq7xwghetnpc31",
     "Name": "zenpython",
     "Title": "",
     "Version": "",
     "Context": null,
     "Environment": null,
     "Startup": "su - zenoss -c \"/opt/zenoss/bin/zenpython run -c --logfileonly --workers {{.Instances}} --workerid $CONTROLPLANE_INSTANCE_ID --monitor {{(parent .).Name}} \"",
     "Description": "Adds a \"Python\" data source type for asynchronous collection using a custom Python module",
     "Tags": [
       "ZenPacks.zenoss.PythonCollector",
       "daemon",
       "collector"
     ],
     "OriginalConfigs": {
       "/opt/zenoss/etc/global.conf": {
         "Filename": "/opt/zenoss/etc/global.conf",
         "Owner": "zenoss:zenoss",
         "Permissions": "660",
         "Content": "# Generated by serviced\n{{range $k,$v:=contextFilter . \"global.conf.\"}}{{$k}} {{$v}}\n{{end}}"
       },
       "/opt/zenoss/etc/zenpython.conf": {
         "Filename": "/opt/zenoss/etc/zenpython.conf",
         "Owner": "zenoss:zenoss",
         "Permissions": "0664",
         "Content": "#\n# Configuration file for zenpython\n#\n#  To enable a particular option, uncomment the desired entry.\n#\n# Parameter     Setting\n# ---------     -------\n#\n# Host of zenhub daemon. Default is localhost.,\n#  default: localhost\n#hubhost localhost\n#\n# Port zenhub listens on.Default is 8789.,\n#  default: 8789\n#hubport 8789\n#\n# Username for zenhub login. Default is\n#  admin., default: admin\n#hubusername admin\n#\n# Password for zenhub login. Default is\n#  zenoss., default: zenoss\n#hubpassword zenoss\n#\n# Name of monitor instance to use for\n#  configuration.  Default is localhost.,\n#  default: localhost\n#monitor localhost\n#\n# Initial time to wait for a ZenHub connection,\n#  default: 30\n#initialHubTimeout 30\n#\n# Send clear events even when the most\n#  recent event was also a clear event.,\n#  default: False\n#allowduplicateclears False\n#\n# Send a clear event every [DUPLICATECLEARINTEVAL]\n#  events., default: 0\n#duplicateclearinterval 0\n#\n# Seconds between attempts to flush events\n#  to ZenHub., default: 5.0\n#eventflushseconds 5.0\n#\n# Number of events to send to ZenHubat\n#  one time, default: 50\n#eventflushchunksize 50\n#\n# Maximum number of events to queue, default:\n#  5000\n#maxqueuelen 5000\n#\n# How often to ping zenhub, default: 30\n#zenhubpinginterval 30\n#\n# Disable event de-duplication, default: True\n#disable-event-deduplication True\n#\n# redis connection string: redis://[hostname]:[port]/[db],\n#  default: %default, default:\n#  redis://localhost:6379/0\n#redis-url redis://localhost:6379/0\n#\n# Number of metrics to buffer if redis\n#  goes down, default: 65536\n#metricBufferSize 65536\n#\n# redis channel to which metrics are published,\n#  default: metrics\n#metricsChannel metrics\n#\n# Max Number of metrics to allow in redis,\n#  default: 864000000\n#maxOutstandingMetrics 864000000\n#\n# Use an alternate configuration file\n#configfile /opt/zenoss/etc/zenpython.conf\n#\n# Generate an XML file containing command-line\n#  switches., default: False\n#genxmlconfigs False\n#\n# User to become when running default:zenoss,\n#  default: zenoss\n#uid zenoss\n#\n# Cycle continuously on cycleInterval\n#  from Zope, default: False\n#cycle False\n#\n# Launch into the background, default: False\n#daemon False\n#\n# Log to console and log file, default: False\n#duallog False\n#\n# Log to log file and not console, default:\n#  False\n#logfileonly False\n#\n# output log info in HTML table format,\n#  default: False\n#weblog False\n#\n# Run under a supervisor which will restart\n#  it, default: False\n#watchdog False\n#\n# The path to the watchdog reporting socket\n#watchdogPath None\n#\n# Wait seconds for initial heartbeat\n#starttimeout None\n#\n# Set listener socket options. For option\n#  details: man 7 socket, default: []\n#socketOption []\n#\n# Specify a device ID to monitor\n#device \n#\n# Max number of tasks to run at once,\n#  default %default, default: 500\n#maxparallel 500\n#\n# How often to logs statistics of current\n#  tasks, value in seconds; very verbose,\n#  default: 0\n#logTaskStats 0\n#\n# How often to write internal statistics\n#  value in seconds, default: 60\n#writeStatistics 60\n#\n# Max number of device configurations\n#  to load at once, default %default (0\n#  == all devices), default: 25\n#configsipsize 25\n#\n# Delay in seconds between device configurations\n#  loading, default %default, default: 1\n#configsipdelay 1\n#\n# Logging severity threshold, default: 20\n#logseverity 20\n#\n# Override the default logging path; default\n#  $ZENHOME/log, default: /opt/zenoss/log\n#logpath /opt/zenoss/log\n#\n# Max size of log file in KB; default\n#  10240, default: 10240\n#maxlogsize 10240\n#\n# Max number of back up log files; default\n#  3, default: 3\n#maxbackuplogs 3\n#\n# Heartbeat timeout, default: 900 sec.\n#heartbeattimeout 900\n#\n"
       }
     },
     "ConfigFiles": {
       "/opt/zenoss/etc/global.conf": {
         "Filename": "/opt/zenoss/etc/global.conf",
         "Owner": "zenoss:zenoss",
         "Permissions": "660",
         "Content": "# Generated by serviced\n{{range $k,$v:=contextFilter . \"global.conf.\"}}{{$k}} {{$v}}\n{{end}}"
       },
       "/opt/zenoss/etc/zenpython.conf": {
         "Filename": "/opt/zenoss/etc/zenpython.conf",
         "Owner": "zenoss:zenoss",
         "Permissions": "0664",
         "Content": "#\n# Configuration file for zenpython\n#\n#  To enable a particular option, uncomment the desired entry.\n#\n# Parameter     Setting\n# ---------     -------\n#\n# Host of zenhub daemon. Default is localhost.,\n#  default: localhost\n#hubhost localhost\n#\n# Port zenhub listens on.Default is 8789.,\n#  default: 8789\n#hubport 8789\n#\n# Username for zenhub login. Default is\n#  admin., default: admin\n#hubusername admin\n#\n# Password for zenhub login. Default is\n#  zenoss., default: zenoss\n#hubpassword zenoss\n#\n# Name of monitor instance to use for\n#  configuration.  Default is localhost.,\n#  default: localhost\n#monitor localhost\n#\n# Initial time to wait for a ZenHub connection,\n#  default: 30\n#initialHubTimeout 30\n#\n# Send clear events even when the most\n#  recent event was also a clear event.,\n#  default: False\n#allowduplicateclears False\n#\n# Send a clear event every [DUPLICATECLEARINTEVAL]\n#  events., default: 0\n#duplicateclearinterval 0\n#\n# Seconds between attempts to flush events\n#  to ZenHub., default: 5.0\n#eventflushseconds 5.0\n#\n# Number of events to send to ZenHubat\n#  one time, default: 50\n#eventflushchunksize 50\n#\n# Maximum number of events to queue, default:\n#  5000\n#maxqueuelen 5000\n#\n# How often to ping zenhub, default: 30\n#zenhubpinginterval 30\n#\n# Disable event de-duplication, default: True\n#disable-event-deduplication True\n#\n# redis connection string: redis://[hostname]:[port]/[db],\n#  default: %default, default:\n#  redis://localhost:6379/0\n#redis-url redis://localhost:6379/0\n#\n# Number of metrics to buffer if redis\n#  goes down, default: 65536\n#metricBufferSize 65536\n#\n# redis channel to which metrics are published,\n#  default: metrics\n#metricsChannel metrics\n#\n# Max Number of metrics to allow in redis,\n#  default: 864000000\n#maxOutstandingMetrics 864000000\n#\n# Use an alternate configuration file\n#configfile /opt/zenoss/etc/zenpython.conf\n#\n# Generate an XML file containing command-line\n#  switches., default: False\n#genxmlconfigs False\n#\n# User to become when running default:zenoss,\n#  default: zenoss\n#uid zenoss\n#\n# Cycle continuously on cycleInterval\n#  from Zope, default: False\n#cycle False\n#\n# Launch into the background, default: False\n#daemon False\n#\n# Log to console and log file, default: False\n#duallog False\n#\n# Log to log file and not console, default:\n#  False\n#logfileonly False\n#\n# output log info in HTML table format,\n#  default: False\n#weblog False\n#\n# Run under a supervisor which will restart\n#  it, default: False\n#watchdog False\n#\n# The path to the watchdog reporting socket\n#watchdogPath None\n#\n# Wait seconds for initial heartbeat\n#starttimeout None\n#\n# Set listener socket options. For option\n#  details: man 7 socket, default: []\n#socketOption []\n#\n# Specify a device ID to monitor\n#device \n#\n# Max number of tasks to run at once,\n#  default %default, default: 500\n#maxparallel 500\n#\n# How often to logs statistics of current\n#  tasks, value in seconds; very verbose,\n#  default: 0\n#logTaskStats 0\n#\n# How often to write internal statistics\n#  value in seconds, default: 60\n#writeStatistics 60\n#\n# Max number of device configurations\n#  to load at once, default %default (0\n#  == all devices), default: 25\n#configsipsize 25\n#\n# Delay in seconds between device configurations\n#  loading, default %default, default: 1\n#configsipdelay 1\n#\n# Logging severity threshold, default: 20\n#logseverity 20\n#\n# Override the default logging path; default\n#  $ZENHOME/log, default: /opt/zenoss/log\n#logpath /opt/zenoss/log\n#\n# Max size of log file in KB; default\n#  10240, default: 10240\n#maxlogsize 10240\n#\n# Max number of back up log files; default\n#  3, default: 3\n#maxbackuplogs 3\n#\n# Heartbeat timeout, default: 900 sec.\n#heartbeattimeout 900\n#\n"
       }
     },
     "Instances": 1,
     "InstanceLimits": {
       "Min": 1,
       "Max": 0,
       "Default": 0
     },
     "ChangeOptions": [
       "restartalloninstancechanged"
     ],
     "ImageID": "98wldj6w8jyna5flfwg5220ne/resmgr_5.3:latest",
     "PoolID": "default",
     "DesiredState": 1,
     "CurrentState": "started",
     "HostPolicy": "",
     "Hostname": "",
     "Privileged": false,
     "Launch": "auto",
     "Endpoints": [
       {
         "Name": "zenhub",
         "Purpose": "import",
         "Protocol": "tcp",
         "PortNumber": 8789,
         "PortTemplate": "",
         "VirtualAddress": "",
         "Application": "localhost_zenhubPB",
         "ApplicationTemplate": "{{(parent (parent .)).Name}}_zenhubPB",
         "AddressConfig": {
           "Port": 0,
           "Protocol": ""
         },
         "VHosts": null,
         "VHostList": null,
         "AddressAssignment": {
           "ID": "",
           "AssignmentType": "",
           "HostID": "",
           "PoolID": "",
           "IPAddr": "",
           "Port": 0,
           "ServiceID": "",
           "EndpointName": ""
         },
         "PortList": null
       },
       {
         "Name": "CollectorRedis",
         "Purpose": "import",
         "Protocol": "tcp",
         "PortNumber": 6379,
         "PortTemplate": "",
         "VirtualAddress": "",
         "Application": "localhost_redis",
         "ApplicationTemplate": "{{(parent .).Name}}_redis",
         "AddressConfig": {
           "Port": 0,
           "Protocol": ""
         },
         "VHosts": null,
         "VHostList": null,
         "AddressAssignment": {
           "ID": "",
           "AssignmentType": "",
           "HostID": "",
           "PoolID": "",
           "IPAddr": "",
           "Port": 0,
           "ServiceID": "",
           "EndpointName": ""
         },
         "PortList": null
       },
       {
         "Name": "zproxy",
         "Purpose": "import",
         "Protocol": "tcp",
         "PortNumber": 8080,
         "PortTemplate": "",
         "VirtualAddress": "",
         "Application": "zproxy",
         "ApplicationTemplate": "zproxy",
         "AddressConfig": {
           "Port": 0,
           "Protocol": ""
         },
         "VHosts": null,
         "VHostList": null,
         "AddressAssignment": {
           "ID": "",
           "AssignmentType": "",
           "HostID": "",
           "PoolID": "",
           "IPAddr": "",
           "Port": 0,
           "ServiceID": "",
           "EndpointName": ""
         },
         "PortList": null
       },
       {
         "Name": "controlplane_consumer",
         "Purpose": "import",
         "Protocol": "tcp",
         "PortNumber": 8444,
         "PortTemplate": "",
         "VirtualAddress": "",
         "Application": "controlplane_consumer",
         "ApplicationTemplate": "controlplane_consumer",
         "AddressConfig": {
           "Port": 0,
           "Protocol": ""
         },
         "VHosts": null,
         "VHostList": null,
         "AddressAssignment": {
           "ID": "",
           "AssignmentType": "",
           "HostID": "",
           "PoolID": "",
           "IPAddr": "",
           "Port": 0,
           "ServiceID": "",
           "EndpointName": ""
         },
         "PortList": null
       },
       {
         "Name": "rabbitmq",
         "Purpose": "import",
         "Protocol": "tcp",
         "PortNumber": 5672,
         "PortTemplate": "",
         "VirtualAddress": "",
         "Application": "rabbitmq",
         "ApplicationTemplate": "rabbitmq",
         "AddressConfig": {
           "Port": 0,
           "Protocol": ""
         },
         "VHosts": null,
         "VHostList": null,
         "AddressAssignment": {
           "ID": "",
           "AssignmentType": "",
           "HostID": "",
           "PoolID": "",
           "IPAddr": "",
           "Port": 0,
           "ServiceID": "",
           "EndpointName": ""
         },
         "PortList": null
       }
     ],
     "ParentServiceID": "dejsqte7ii9gszewhp2wdc9nj",
     "Volumes": [
       {
         "Owner": "zenoss:zenoss",
         "Permission": "0755",
         "ResourcePath": ".ssh",
         "ContainerPath": "/home/zenoss/.ssh",
         "Type": "",
         "InitContainerPath": "",
         "ExcludeFromBackups": false
       },
       {
         "Owner": "zenoss:zenoss",
         "Permission": "0775",
         "ResourcePath": "var-zenpacks",
         "ContainerPath": "/var/zenoss",
         "Type": "",
         "InitContainerPath": "",
         "ExcludeFromBackups": false
       }
     ],
     "CreatedAt": "2017-09-27T12:13:47.228669893Z",
     "UpdatedAt": "2017-09-28T09:12:58.161302376Z",
     "DeploymentID": "aws_deployment",
     "DisableImage": false,
     "LogConfigs": [
       {
         "Path": "/opt/zenoss/log/zenpython.log",
         "Type": "zenpython",
         "Filters": [
           "pythondaemon"
         ],
         "LogTags": [
           {
             "Name": "monitor",
             "Value": "{{(parent .).Name}}"
           }
         ],
         "IsAudit": false
       },
       {
         "Path": "/opt/zenoss/log/audit.log",
         "Type": "zenossaudit",
         "Filters": [
           "supervisord"
         ],
         "LogTags": null,
         "IsAudit": true
       }
     ],
     "Snapshot": {
       "Pause": "",
       "Resume": ""
     },
     "DisableShell": false,
     "Runs": null,
     "Commands": null,
     "RAMCommitment": "1G",
     "CPUCommitment": 1,
     "Actions": {
       "debug": "su - zenoss -c '${ZENHOME:-/opt/zenoss}/bin/{{.Name}} debug'",
       "stats": "su - zenoss -c '${ZENHOME:-/opt/zenoss}/bin/{{.Name}} stats'"
     },
     "HealthChecks": {
       "central_query_answering": {
         "Script": "/opt/zenoss/bin/healthchecks/query_answering",
         "Timeout": 0,
         "Interval": 10,
         "Tolerance": 0
       },
       "redis_answering": {
         "Script": "/opt/zenoss/bin/healthchecks/redis_answering",
         "Timeout": 0,
         "Interval": 5,
         "Tolerance": 0
       },
       "running": {
         "Script": "pgrep -fu zenoss zenpython.py \u003e /dev/null",
         "Timeout": 0,
         "Interval": 5,
         "Tolerance": 0
       },
       "zenhub_answering": {
         "Script": "/opt/zenoss/bin/healthchecks/zenhub_answering",
         "Timeout": 0,
         "Interval": 10,
         "Tolerance": 0
       }
     },
     "Prereqs": null,
     "MonitoringProfile": {
       "MetricConfigs": [
         {
           "ID": "zenpython",
           "Name": "zenpython internal metrics",
           "Description": "zenpython internal metrics",
           "Query": {
             "RequestURI": "/metrics/api/performance/query",
             "Method": "POST",
             "Headers": {
               "Content-Type": [
                 "application/json"
               ]
             },
             "Data": "{\"metrics\":[{\"metric\":\"dataPoints\",\"tags\":{\"controlplane_service_id\":[\"2suini94i1jnq7xwghetnpc31\"]}},{\"metric\":\"devices\",\"tags\":{\"controlplane_service_id\":[\"2suini94i1jnq7xwghetnpc31\"]}},{\"metric\":\"eventCount\",\"tags\":{\"controlplane_service_id\":[\"2suini94i1jnq7xwghetnpc31\"]}},{\"metric\":\"eventQueueLength\",\"tags\":{\"controlplane_service_id\":[\"2suini94i1jnq7xwghetnpc31\"]}},{\"metric\":\"missedRuns\",\"tags\":{\"controlplane_service_id\":[\"2suini94i1jnq7xwghetnpc31\"]}},{\"metric\":\"queuedTasks\",\"tags\":{\"controlplane_service_id\":[\"2suini94i1jnq7xwghetnpc31\"]}},{\"metric\":\"runningTasks\",\"tags\":{\"controlplane_service_id\":[\"2suini94i1jnq7xwghetnpc31\"]}},{\"metric\":\"taskCount\",\"tags\":{\"controlplane_service_id\":[\"2suini94i1jnq7xwghetnpc31\"]}}],\"start\":\"1h-ago\"}"
           },
           "Metrics": [
             {
               "ID": "dataPoints",
               "Name": "Datapoints",
               "Description": "Number of datapoints collected.",
               "Counter": true,
               "ResetValue": 0,
               "Unit": "Points",
               "BuiltIn": false
             },
             {
               "ID": "devices",
               "Name": "Devices",
               "Description": "Number of devices.",
               "Counter": false,
               "ResetValue": 0,
               "Unit": "Count",
               "BuiltIn": false
             },
             {
               "ID": "eventCount",
               "Name": "Event Count",
               "Description": "Total number of events.",
               "Counter": true,
               "ResetValue": 0,
               "Unit": "Events",
               "BuiltIn": false
             },
             {
               "ID": "eventQueueLength",
               "Name": "Event Queue Length",
               "Description": "The number of events pending to be flushed from a daemon's memory queue.",
               "Counter": false,
               "ResetValue": 0,
               "Unit": "Events",
               "BuiltIn": false
             },
             {
               "ID": "missedRuns",
               "Name": "Missed Runs",
               "Description": "Number of missed runs of tasks running on daemon.",
               "Counter": true,
               "ResetValue": 0,
               "Unit": "Runs",
               "BuiltIn": false
             },
             {
               "ID": "queuedTasks",
               "Name": "Queued Tasks",
               "Description": "Number of tasks scheduled to be run, but are not running yet.",
               "Counter": false,
               "ResetValue": 0,
               "Unit": "Tasks",
               "BuiltIn": false
             },
             {
               "ID": "runningTasks",
               "Name": "Running Tasks",
               "Description": "Number of currently running tasks.",
               "Counter": false,
               "ResetValue": 0,
               "Unit": "Tasks",
               "BuiltIn": false
             },
             {
               "ID": "taskCount",
               "Name": "Task Count",
               "Description": "Total number of tasks.",
               "Counter": false,
               "ResetValue": 0,
               "Unit": "Tasks",
               "BuiltIn": false
             }
           ]
         }
       ],
       "GraphConfigs": [
         {
           "id": "dataPoints",
           "name": "Data Points",
           "footer": false,
           "format": "",
           "returnset": "EXACT",
           "type": "line",
           "tags": {
             "controlplane_service_id": [
               "2suini94i1jnq7xwghetnpc31"
             ]
           },
           "miny": null,
           "maxy": null,
           "yAxisLabel": "Data Points",
           "description": "Number of datapoints collected.",
           "range": {
             "start": "1h-ago",
             "end": "0s-ago"
           },
           "datapoints": [
             {
               "aggregator": "avg",
               "color": "",
               "expression": "",
               "fill": false,
               "format": "%d",
               "legend": "Data Points",
               "metric": "dataPoints",
               "metricSource": "zenpython",
               "id": "dataPoints",
               "name": "Data Points",
               "rate": true,
               "rateOptions": {
                 "counter": true
               },
               "type": "line"
             }
           ],
           "builtin": false,
           "units": "Points",
           "base": 0
         },
         {
           "id": "devices",
           "name": "Devices",
           "footer": false,
           "format": "",
           "returnset": "EXACT",
           "type": "line",
           "tags": {
             "controlplane_service_id": [
               "2suini94i1jnq7xwghetnpc31"
             ]
           },
           "miny": null,
           "maxy": null,
           "yAxisLabel": "Devices",
           "description": "Number of devices.",
           "range": {
             "start": "1h-ago",
             "end": "0s-ago"
           },
           "datapoints": [
             {
               "aggregator": "avg",
               "color": "",
               "expression": "",
               "fill": false,
               "format": "%d",
               "legend": "Devices",
               "metric": "devices",
               "metricSource": "zenpython",
               "id": "devices",
               "name": "Devices",
               "rate": false,
               "rateOptions": null,
               "type": "line"
             }
           ],
           "builtin": false,
           "units": "Count",
           "base": 0
         },
         {
           "id": "eventCount",
           "name": "Event Count",
           "footer": false,
           "format": "",
           "returnset": "EXACT",
           "type": "line",
           "tags": {
             "controlplane_service_id": [
               "2suini94i1jnq7xwghetnpc31"
             ]
           },
           "miny": null,
           "maxy": null,
           "yAxisLabel": "Event Count",
           "description": "Total number of events.",
           "range": {
             "start": "1h-ago",
             "end": "0s-ago"
           },
           "datapoints": [
             {
               "aggregator": "avg",
               "color": "",
               "expression": "",
               "fill": false,
               "format": "%d",
               "legend": "Event Count",
               "metric": "eventCount",
               "metricSource": "zenpython",
               "id": "eventCount",
               "name": "Event Count",
               "rate": true,
               "rateOptions": {
                 "counter": true
               },
               "type": "line"
             }
           ],
           "builtin": false,
           "units": "Events",
           "base": 0
         },
         {
           "id": "eventQueueLength",
           "name": "Event Queue Length",
           "footer": false,
           "format": "",
           "returnset": "EXACT",
           "type": "line",
           "tags": {
             "controlplane_service_id": [
               "2suini94i1jnq7xwghetnpc31"
             ]
           },
           "miny": null,
           "maxy": null,
           "yAxisLabel": "Event Queue Length",
           "description": "The number of events pending to be flushed from a daemon's memory queue.",
           "range": {
             "start": "1h-ago",
             "end": "0s-ago"
           },
           "datapoints": [
             {
               "aggregator": "avg",
               "color": "",
               "expression": "",
               "fill": false,
               "format": "%d",
               "legend": "Event Queue Length",
               "metric": "eventQueueLength",
               "metricSource": "zenpython",
               "id": "eventQueueLength",
               "name": "Event Queue Length",
               "rate": false,
               "rateOptions": null,
               "type": "line"
             }
           ],
           "builtin": false,
           "units": "Events",
           "base": 0
         },
         {
           "id": "missedRuns",
           "name": "Missed Runs",
           "footer": false,
           "format": "",
           "returnset": "EXACT",
           "type": "line",
           "tags": {
             "controlplane_service_id": [
               "2suini94i1jnq7xwghetnpc31"
             ]
           },
           "miny": null,
           "maxy": null,
           "yAxisLabel": "Missed Runs",
           "description": "Number of missed runs of tasks running on daemon.",
           "range": {
             "start": "1h-ago",
             "end": "0s-ago"
           },
           "datapoints": [
             {
               "aggregator": "avg",
               "color": "",
               "expression": "",
               "fill": false,
               "format": "%d",
               "legend": "Missed Runs",
               "metric": "missedRuns",
               "metricSource": "zenpython",
               "id": "missedRuns",
               "name": "Missed Runs",
               "rate": true,
               "rateOptions": {
                 "counter": true
               },
               "type": "line"
             }
           ],
           "builtin": false,
           "units": "Runs",
           "base": 0
         },
         {
           "id": "tasks",
           "name": "Tasks",
           "footer": false,
           "format": "",
           "returnset": "EXACT",
           "type": "line",
           "tags": {
             "controlplane_service_id": [
               "2suini94i1jnq7xwghetnpc31"
             ]
           },
           "miny": null,
           "maxy": null,
           "yAxisLabel": "",
           "description": "Number of queued, running, and total tasks.",
           "range": {
             "start": "1h-ago",
             "end": "0s-ago"
           },
           "datapoints": [
             {
               "aggregator": "avg",
               "color": "",
               "expression": "",
               "fill": false,
               "format": "%d",
               "legend": "Queued Tasks",
               "metric": "queuedTasks",
               "metricSource": "zenpython",
               "id": "queuedTasks",
               "name": "Queued Tasks",
               "rate": false,
               "rateOptions": null,
               "type": "line"
             },
             {
               "aggregator": "avg",
               "color": "",
               "expression": "",
               "fill": false,
               "format": "%d",
               "legend": "Running Tasks",
               "metric": "runningTasks",
               "metricSource": "zenpython",
               "id": "runningTasks",
               "name": "Running Tasks",
               "rate": false,
               "rateOptions": null,
               "type": "line"
             },
             {
               "aggregator": "avg",
               "color": "",
               "expression": "",
               "fill": false,
               "format": "%d",
               "legend": "Task Count",
               "metric": "taskCount",
               "metricSource": "zenpython",
               "id": "taskCount",
               "name": "Task Count",
               "rate": false,
               "rateOptions": null,
               "type": "line"
             }
           ],
           "builtin": false,
           "units": "Tasks",
           "base": 0
         }
       ],
       "ThresholdConfigs": []
     },
     "MemoryLimit": 0,
     "CPUShares": 0,
     "PIDFile": "",
     "StartLevel": 0,
     "EmergencyShutdownLevel": 0,
     "EmergencyShutdown": false,
     "DatabaseVersion": 2
   }
]