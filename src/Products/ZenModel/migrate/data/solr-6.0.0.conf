multiline {
    pattern => "^%{TIMESTAMP_ISO8601}"
    negate => true
    what => "previous"
}

grok {
    break_on_match => true

#Match messages like this:
#2017-08-28 16:49:40.897 INFO (coreZkRegister-1-thread-1-processing-n:172.17.0.13:8983_solr x:zenoss_model_shard1_replica1 s:shard1 c:zenoss_model r:core_node1) [c:zenoss_model s:shard1 r:core_node1 x:zenoss_model_shard1_replica1] o.a.s.c.ShardLeaderElectionContext Found all replicas participating in election, clear LIR
	match => [ "message", "%{TIMESTAMP_ISO8601:datetime}%{SPACE}%{LOGLEVEL:loglevel}%{SPACE}%{SPACE}\(%{DATA:thread}\)%{SPACE}%{DATA:message}" ]
}

mutate {
    # Convert "ss,SSS" to "ss.SSS" in case we hit some older/different logs
    gsub => [ "datetime", "\,", "." ]
}

# This filter parses the datetime field into a time value,
# removes the datetime field from the data, and
# then uses the parsed value as the \"@timestamp\" for the message.
date {
    match => [ "datetime", "yyyy-MM-dd HH:mm:ss.SSS" ]
    remove_field => ["datetime"]
}
