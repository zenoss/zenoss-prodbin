#
# This filter is named supervisord, but it's actually specific to the Zenoss
# python audit logger.
#

multiline {
    pattern => "^%{TIMESTAMP_ISO8601} "
    negate => true
    what => "previous"
}

grok {
    # The Zenoss audit logger allows for a wide variety of name=value pairs.
    # The list below may not be inclusive of all them, but these are at least a
    # reasonable majority.
    match => { "message" => [
        "kind=%{QUOTEDSTRING:kind}",
        "action=%{QUOTEDSTRING:action}",
        "user=%{USERNAME:user}",
        "daemon=%{QUOTEDSTRING:daemon}",
        "parameters=%{QUOTEDSTRING:parameters}",
        "source=%{QUOTEDSTRING:source}",
        "process=%{QUOTEDSTRING:process}",
        "logname=%{USERNAME:logname}",
        "zenpack=%{USERNAME:zenpack}",
        "ipaddress=%{IP:ipaddress}",
        "device_name=%{QUOTEDSTRING:device_name}",
        "%{TIMESTAMP_ISO8601:datetime} %{WORD:loglevel} %{GREEDYDATA:message}"
    ]}
    break_on_match => false
}

mutate {
    # remove literal 'T' from datetime to make parsing in the next step easier
    gsub => [ "datetime", "T", " " ]

    # Don't leave embeded quotes
    gsub => [ "kind", "\"", "" ]
    gsub => [ "action", "\"", "" ]
    gsub => [ "daemon", "\"", "" ]
    gsub => [ "parameters", "\"", "" ]
    gsub => [ "source", "\"", "" ]
    gsub => [ "process", "\"", "" ]
    gsub => [ "device_name", "\"", "" ]
}

# This filter parses the datetime field into a time value,
# removes the datetime field from the data, and
# then uses the parsed value as the "@timestamp" for the message.
date {
    match => [ "datetime", "yyyy-MM-dd HH:mm:ss" ]
    remove_field => ["datetime"]
}
