<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--  
 This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default) 
 or located where the classloader for the Solr webapp can find it.

 This example schema is the recommended starting point for users.
 It should be kept correct and concise, usable out-of-the-box.

 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml
-->

<schema name="zenoss_model" version="1.6">
  <!-- attribute "name" is the name of this schema and is only used for display purposes.
       version="x.y" is Solr's version number for the schema syntax and 
       semantics.  It should not normally be changed by applications.

       1.0: multiValued attribute did not exist, all fields are multiValued 
            by nature
       1.1: multiValued attribute introduced, false by default 
       1.2: omitTermFreqAndPositions attribute introduced, true by default 
            except for text fields.
       1.3: removed optional field compress feature
       1.4: autoGeneratePhraseQueries attribute introduced to drive QueryParser
            behavior when a single string produces multiple tokens.  Defaults 
            to off for version >= 1.4
       1.5: omitNorms defaults to true for primitive field types 
            (int, float, boolean, string...)
       1.6: useDocValuesAsStored defaults to true.
     -->


   <!-- Valid attributes for fields:
     name: mandatory - the name for the field
     type: mandatory - the name of a field type from the 
       <types> fieldType section
     indexed: true if this field should be indexed (searchable or sortable)
     stored: true if this field should be retrievable
     docValues: true if this field should have doc values. Doc values are
       useful for faceting, grouping, sorting and function queries. Although not
       required, doc values will make the index faster to load, more
       NRT-friendly and more memory-efficient. They however come with some
       limitations: they are currently only supported by StrField, UUIDField
       and all Trie*Fields, and depending on the field type, they might
       require the field to be single-valued, be required or have a default
       value (check the documentation of the field type you're interested in
       for more information)
     multiValued: true if this field may contain multiple values per document
     omitNorms: (expert) set to true to omit the norms associated with
       this field (this disables length normalization and index-time
       boosting for the field, and saves some memory).  Only full-text
       fields or fields that need an index-time boost need norms.
       Norms are omitted for primitive (non-analyzed) types by default.
     termVectors: [false] set to true to store the term vector for a
       given field.
       When using MoreLikeThis, fields used for similarity should be
       stored for best performance.
     termPositions: Store position information with the term vector.  
       This will increase storage costs.
     termOffsets: Store offset information with the term vector. This 
       will increase storage costs.
     required: The field is required.  It will throw an error if the
       value does not exist
     default: a value that should be used if no value is specified
       when adding a document.
   -->

   <!-- field names should consist of alphanumeric or underscore characters only and
      not start with a digit.  This is not currently strictly enforced,
      but other field names will not have first class support from all components
      and back compatibility is not guaranteed.  Names with both leading and
      trailing underscores (e.g. _version_) are reserved.
   -->

   <!-- If you remove this field, you must _also_ disable the update log in solrconfig.xml
      or Solr won't start. _version_ and update log are required for SolrCloud
   --> 
   <field name="_version_" type="long" indexed="true" stored="true" multiValued="false" />
   
   <!-- points to the root document of a block of nested documents. Required for nested
      document support, may be removed otherwise
   -->
   <field name="_root_" type="string" indexed="true" stored="false"/>

   <!-- Only remove the "id" field if you have a very good reason to. While not strictly
     required, it is highly recommended. A <uniqueKey> is present in almost all Solr 
     installations. See the <uniqueKey> declaration below where <uniqueKey> is set to "id".
   -->

   <field name="modelindex_uid" type="string" indexed="true" stored="true" required="true" multiValued="false" />
   <field name="uid" type="string" indexed="true" stored="true" multiValued="false" />

   <!-- Dynamic field definitions allow using convention over configuration
       for fields via the specification of patterns to match field names. 
       EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
       RESTRICTION: the glob-like pattern in the name attribute must have
       a "*" only at the start or the end.  -->
   
   <!-- For zenoss_model we are coding the dynamic fields using two suffixes, one
        for the type and other to indicate if the field is indexed and/or stored and/or multivalued
        Examples:
            indexed string field                    => _s_inn
            indexed stored multivalued string field => _s_ism
            stored string field                     => _s_nsn   -->

    <!-- Integer -->
    <dynamicField name="*_i_isnn"  type="int" indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="*_i_innn"  type="int" indexed="true"  stored="false" multiValued="false"/>
    <dynamicField name="*_i_nsnn"  type="int" indexed="false"  stored="true" multiValued="false"/>
    <dynamicField name="*_i_ismn"  type="int" indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="*_i_inmn"  type="int" indexed="true"  stored="false" multiValued="true"/>
    <dynamicField name="*_i_nsmn"  type="int" indexed="false"  stored="true" multiValued="true"/>

    <!-- Long -->
    <dynamicField name="*_l_isnn"  type="long" indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="*_l_innn"  type="long" indexed="true"  stored="false" multiValued="false"/>
    <dynamicField name="*_l_nsnn"  type="long" indexed="false"  stored="true" multiValued="false"/>
    <dynamicField name="*_l_ismn"  type="long" indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="*_l_inmn"  type="long" indexed="true"  stored="false" multiValued="true"/>
    <dynamicField name="*_l_nsmn"  type="long" indexed="false"  stored="true" multiValued="true"/>

    <!-- Float -->
    <dynamicField name="*_f_isnn"  type="float" indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="*_f_innn"  type="float" indexed="true"  stored="false" multiValued="false"/>
    <dynamicField name="*_f_nsnn"  type="float" indexed="false"  stored="true" multiValued="false"/>
    <dynamicField name="*_f_ismn"  type="float" indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="*_f_inmn"  type="float" indexed="true"  stored="false" multiValued="true"/>
    <dynamicField name="*_f_nsmn"  type="float" indexed="false"  stored="true" multiValued="true"/>

    <!-- Double -->
    <dynamicField name="*_d_isnn"  type="double" indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="*_d_innn"  type="double" indexed="true"  stored="false" multiValued="false"/>
    <dynamicField name="*_d_nsnn"  type="double" indexed="false"  stored="true" multiValued="false"/>
    <dynamicField name="*_d_ismn"  type="double" indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="*_d_inmn"  type="double" indexed="true"  stored="false" multiValued="true"/>
    <dynamicField name="*_d_nsmn"  type="double" indexed="false"  stored="true" multiValued="true"/>

    <!-- Boolean -->
    <dynamicField name="*_b_isnn"  type="boolean" indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="*_b_innn"  type="boolean" indexed="true"  stored="false" multiValued="false"/>
    <dynamicField name="*_b_nsnn"  type="boolean" indexed="false"  stored="true" multiValued="false"/>
    <dynamicField name="*_b_ismn"  type="boolean" indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="*_b_inmn"  type="boolean" indexed="true"  stored="false" multiValued="true"/>
    <dynamicField name="*_b_nsmn"  type="boolean" indexed="false"  stored="true" multiValued="true"/>

    <!-- String -->
    <dynamicField name="*_s_isnt"  type="text_general" indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="*_s_innt"  type="text_general" indexed="true"  stored="false" multiValued="false"/>
    <dynamicField name="*_s_nsnt"  type="text_general" indexed="false"  stored="true" multiValued="false"/>
    <dynamicField name="*_s_ismt"  type="text_general" indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="*_s_inmt"  type="text_general" indexed="true"  stored="false" multiValued="true"/>
    <dynamicField name="*_s_nsmt"  type="text_general" indexed="false"  stored="true" multiValued="true"/>

    <!-- IP Address string -->
    <dynamicField name="*_ips_isnt"  type="ipaddress" indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="*_ips_innt"  type="ipaddress" indexed="true"  stored="false" multiValued="false"/>
    <dynamicField name="*_ips_nsnt"  type="ipaddress" indexed="false"  stored="true" multiValued="false"/>
    <dynamicField name="*_ips_ismt"  type="ipaddress" indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="*_ips_inmt"  type="ipaddress" indexed="true"  stored="false" multiValued="true"/>
    <dynamicField name="*_ips_nsmt"  type="ipaddress" indexed="false"  stored="true" multiValued="true"/>

    <!-- Untokenized String -->
    <dynamicField name="*_s_isnn"  type="lowercase" indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="*_s_innn"  type="lowercase" indexed="true"  stored="false" multiValued="false"/>
    <dynamicField name="*_s_nsnn"  type="lowercase" indexed="false"  stored="true" multiValued="false"/>
    <dynamicField name="*_s_ismn"  type="lowercase" indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="*_s_inmn"  type="lowercase" indexed="true"  stored="false" multiValued="true"/>
    <dynamicField name="*_s_nsmn"  type="lowercase" indexed="false"  stored="true" multiValued="true"/>

    <!-- Text General -->
    <dynamicField name="*_t_isnt"  type="text_general" indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="*_t_innt"  type="text_general" indexed="true"  stored="false" multiValued="false"/>
    <dynamicField name="*_t_nsnt"  type="text_general" indexed="false"  stored="true" multiValued="false"/>
    <dynamicField name="*_t_ismt"  type="text_general" indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="*_t_inmt"  type="text_general" indexed="true"  stored="false" multiValued="true"/>
    <dynamicField name="*_t_nsmt"  type="text_general" indexed="false"  stored="true" multiValued="true"/>

    <!-- List of Strings -->
    <dynamicField name="*_s-list_ismt"  type="text_general" indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="*_s-list_inmt"  type="text_general" indexed="true"  stored="false" multiValued="true"/>
    <dynamicField name="*_s-list_nsmt"  type="text_general" indexed="false"  stored="true" multiValued="true"/>

    <!-- List of Path Strings -->
    <dynamicField name="*_path-list_ismn"  type="path" indexed="true"  stored="true" multiValued="true"/>

    <!-- List of Untokenized Strings -->
    <dynamicField name="*_s-list_ismn"  type="lowercase" indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="*_s-list_inmn"  type="lowercase" indexed="true"  stored="false" multiValued="true"/>
    <dynamicField name="*_s-list_nsmn"  type="lowercase" indexed="false"  stored="true" multiValued="true"/>

    <!-- Tuple of Strings -->
    <dynamicField name="*_s-tuple_ismt"  type="text_general" indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="*_s-tuple_inmt"  type="text_general" indexed="true"  stored="false" multiValued="true"/>
    <dynamicField name="*_s-tuple_nsmt"  type="text_general" indexed="false"  stored="true" multiValued="true"/>

    <!-- Tuple of Untokenized Strings -->
    <dynamicField name="*_s-tuple_ismn"  type="lowercase" indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="*_s-tuple_inmn"  type="lowercase" indexed="true"  stored="false" multiValued="true"/>
    <dynamicField name="*_s-tuple_nsmn"  type="lowercase" indexed="false"  stored="true" multiValued="true"/>

    <!-- Dict as Strings -->>
    <dynamicField name="*_s-dict_ismt"  type="text_general" indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="*_s-dict_inmt"  type="text_general" indexed="true"  stored="false" multiValued="true"/>
    <dynamicField name="*_s-dict_nsmt"  type="text_general" indexed="false"  stored="true" multiValued="true"/>

   <!-- End of zenoss_model coded dynamic fields -->

   <dynamicField name="*_i"  type="int"    indexed="true"  stored="true"/>
   <dynamicField name="*_is" type="int"    indexed="true"  stored="true"  multiValued="true"/>
   <dynamicField name="*_s"  type="string"  indexed="true"  stored="true" />
   <dynamicField name="*_ss" type="string"  indexed="true"  stored="true" multiValued="true"/>
   <dynamicField name="*_l"  type="long"   indexed="true"  stored="true"/>
   <dynamicField name="*_ls" type="long"   indexed="true"  stored="true"  multiValued="true"/>
   <dynamicField name="*_t"  type="text_general"    indexed="true"  stored="true"/>
   <dynamicField name="*_txt" type="text_general"   indexed="true"  stored="true" multiValued="true"/>
   <dynamicField name="*_b"  type="boolean" indexed="true" stored="true"/>
   <dynamicField name="*_bs" type="boolean" indexed="true" stored="true"  multiValued="true"/>
   <dynamicField name="*_f"  type="float"  indexed="true"  stored="true"/>
   <dynamicField name="*_fs" type="float"  indexed="true"  stored="true"  multiValued="true"/>
   <dynamicField name="*_d"  type="double" indexed="true"  stored="true"/>
   <dynamicField name="*_ds" type="double" indexed="true"  stored="true"  multiValued="true"/>

   <!-- Type used to index the lat and lon components for the "location" FieldType -->
   <dynamicField name="*_coordinate"  type="tdouble" indexed="true"  stored="false" />

   <dynamicField name="*_dt"  type="date"    indexed="true"  stored="true"/>
   <dynamicField name="*_dts" type="date"    indexed="true"  stored="true" multiValued="true"/>
   <dynamicField name="*_p"  type="path" indexed="true" stored="true"/>
   <dynamicField name="*_ps"  type="path" indexed="true" stored="true" multiValued="true"/>

   <!-- some trie-coded dynamic fields for faster range queries -->
   <dynamicField name="*_ti" type="tint"    indexed="true"  stored="true"/>
   <dynamicField name="*_tl" type="tlong"   indexed="true"  stored="true"/>
   <dynamicField name="*_tf" type="tfloat"  indexed="true"  stored="true"/>
   <dynamicField name="*_td" type="tdouble" indexed="true"  stored="true"/>
   <dynamicField name="*_tdt" type="tdate"  indexed="true"  stored="true"/>

   <dynamicField name="ignored_*" type="ignored" multiValued="true"/>
   <dynamicField name="*_md" type="stored"/>
   <dynamicField name="*_mds" type="stored" multiValued="true"/>
   <dynamicField name="attr_*" type="text_general" indexed="true" stored="true" multiValued="true"/>

   <dynamicField name="random_*" type="random" />

   <!-- uncomment the following to ignore any fields that don't already match an existing 
        field name or dynamic field, rather than reporting them as an error. 
        alternately, change the type="ignored" to some other type e.g. "text" if you want 
        unknown fields indexed and/or stored by default --> 
<!--   <dynamicField name="*" type="ignored" />-->

  <!-- Field to use to determine and enforce document uniqueness. 
      Unless this field is marked with required="false", it will be a required field
   -->
  <uniqueKey>modelindex_uid</uniqueKey>

  <!-- copyField commands copy one field to another at the time a document
        is added to the index.  It's used either to index the same field differently,
        or to add multiple fields to the same field for easier/faster searching.  -->

  <!--
   <copyField source="title" dest="text"/>
   <copyField source="body" dest="text"/>
  -->
  
    <!-- field type definitions. The "name" attribute is
       just a label to be used by field definitions.  The "class"
       attribute and any other attributes determine the real
       behavior of the fieldType.
         Class names starting with "solr" refer to java classes in a
       standard package such as org.apache.solr.analysis
    -->

    <!-- The StrField type is not analyzed, but indexed/stored verbatim.
       It supports doc values but in that case the field needs to be
       single-valued and either required or have a default value.
      -->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true" />

    <!-- boolean type: "true" or "false" -->
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>

    <!-- sortMissingLast and sortMissingFirst attributes are optional attributes are
         currently supported on types that are sorted internally as strings
         and on numeric types.
         This includes "string","boolean", and, as of 3.5 (and 4.x),
         int, float, long, date, double, including the "Trie" variants.
       - If sortMissingLast="true", then a sort on this field will cause documents
         without the field to come after documents with the field,
         regardless of the requested sort order (asc or desc).
       - If sortMissingFirst="true", then a sort on this field will cause documents
         without the field to come before documents with the field,
         regardless of the requested sort order.
       - If sortMissingLast="false" and sortMissingFirst="false" (the default),
         then default lucene sorting will be used which places docs without the
         field first in an ascending sort and last in a descending sort.
    -->    

    <!--
      Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.

      These fields support doc values, but they require the field to be
      single-valued and either be required or have a default value.
    -->
    <fieldType name="int" class="solr.IntPointField" docValues="true" positionIncrementGap="0"/>
    <fieldType name="float" class="solr.FloatPointField" docValues="true" positionIncrementGap="0"/>
    <fieldType name="long" class="solr.LongPointField" docValues="true" positionIncrementGap="0"/>
    <fieldType name="double" class="solr.DoublePointField" docValues="true" positionIncrementGap="0"/>

    <!--
     Numeric field types that index each value at various levels of precision
     to accelerate range queries when the number of values between the range
     endpoints is large. See the javadoc for NumericRangeQuery for internal
     implementation details.

     Smaller precisionStep values (specified in bits) will lead to more tokens
     indexed per value, slightly larger index size, and faster range queries.
     A precisionStep of 0 disables indexing at different precision levels.
    -->
    <fieldType name="tint" class="solr.IntPointField" positionIncrementGap="0"/>
    <fieldType name="tfloat" class="solr.FloatPointField" positionIncrementGap="0"/>
    <fieldType name="tlong" class="solr.LongPointField" positionIncrementGap="0"/>
    <fieldType name="tdouble" class="solr.DoublePointField" positionIncrementGap="0"/>

    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime    
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...

               NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day

         Consult the DatePointField javadocs for more information.

         Note: For faster range queries, consider the tdate type
      -->
    <fieldType name="date" class="solr.DatePointField" docValues="true" positionIncrementGap="0"/>

    <!-- A Trie based date field for faster date range queries and date faceting. -->
    <fieldType name="tdate" class="solr.DatePointField" positionIncrementGap="0"/>


    <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
    <fieldType name="binary" class="solr.BinaryField"/>

    <!-- The "RandomSortField" is not used to store or search any
         data.  You can declare fields of this type it in your schema
         to generate pseudo-random orderings of your docs for sorting 
         or function purposes.  The ordering is generated based on the field
         name and the version of the index. As long as the index version
         remains unchanged, and the same field name is reused,
         the ordering of the docs will be consistent.  
         If you want different psuedo-random orderings of documents,
         for the same version of the index, use a dynamicField and
         change the field name in the request.
     -->
    <fieldType name="random" class="solr.RandomSortField" indexed="true" />

    <!-- solr.TextField allows the specification of custom text analyzers
         specified as a tokenizer and a list of token filters. Different
         analyzers may be specified for indexing and querying.

         The optional positionIncrementGap puts space between multiple fields of
         this type on the same document, with the purpose of preventing false phrase
         matching across fields.

         For more info on customizing your analyzer chain, please see
         http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
     -->

    <!-- One can also specify an existing Analyzer class that has a
         default constructor via the class attribute on the analyzer element.
         Example:
    <fieldType name="text_greek" class="solr.TextField">
      <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
    </fieldType>
    -->

    <!-- A text field that only splits on whitespace for exact matching of words -->
    <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>

    <fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <fieldType name="path" class="solr.TextField">
        <analyzer type="index">
            <tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/" />
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.KeywordTokenizerFactory" />
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- This is an example of using the KeywordTokenizer along
         With various TokenFilterFactories to produce a sortable field
         that does not include some properties of the source text
      -->
    <fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
      <analyzer>
        <!-- KeywordTokenizer does no actual tokenizing, so the entire
             input string is preserved as a single token
          -->
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <!-- The LowerCase TokenFilter does what you expect, which can be
             when you want your sorting to be case insensitive
          -->
        <filter class="solr.LowerCaseFilterFactory" />
        <!-- The TrimFilter removes any leading or trailing whitespace -->
        <filter class="solr.TrimFilterFactory" />
        <!-- The PatternReplaceFilter gives you the flexibility to use
             Java Regular expression to replace any sequence of characters
             matching a pattern with an arbitrary replacement string, 
             which may include back references to portions of the original
             string matched by the pattern.
             
             See the Java Regular Expression documentation for more
             information on pattern and replacement string syntax.
             
             http://docs.oracle.com/javase/7/docs/api/java/util/regex/package-summary.html
          -->
        <filter class="solr.PatternReplaceFilterFactory"
                pattern="([^a-z])" replacement="" replace="all"
        />
      </analyzer>
    </fieldType>

    <!-- lowercases the entire field value, keeping it as a single token.  -->
    <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory" />
      </analyzer>
    </fieldType>

    <!-- since fields of this type are by default not stored or indexed,
         any data added to them will be ignored outright.  -->
    <fieldtype name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField" />

    <fieldType name="stored" stored="true" indexed="false" class="solr.StrField" />

    <!-- This point type indexes the coordinates as separate fields (subFields)
      If subFieldType is defined, it references a type, and a dynamic field
      definition is created matching *___<typename>.  Alternately, if 
      subFieldSuffix is defined, that is used to create the subFields.
      Example: if subFieldType="double", then the coordinates would be
        indexed in fields myloc_0___double,myloc_1___double.
      Example: if subFieldSuffix="_d" then the coordinates would be indexed
        in fields myloc_0_d,myloc_1_d
      The subFields are an implementation detail of the fieldType, and end
      users normally should not need to know about them.
     -->
    <fieldType name="point" class="solr.PointType" dimension="2" subFieldSuffix="_d"/>

    <!-- A specialized field for geospatial search. If indexed, this fieldType must not be multivalued. -->
    <fieldType name="location" class="solr.LatLonPointSpatialField" />

    <!-- An alternative geospatial field type new to Solr 4.  It supports multiValued and polygon shapes.
      For more information about this and other Spatial fields new to Solr 4, see:
      http://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4
    -->
    <fieldType name="location_rpt" class="solr.SpatialRecursivePrefixTreeFieldType"
        geo="true" distErrPct="0.025" maxDistErr="0.001" distanceUnits="kilometers" />

    <!-- Spatial rectangle (bounding box) field. It supports most spatial predicates, and has
     special relevancy modes: score=overlapRatio|area|area2D (local-param to the query).  DocValues is recommended for
     relevancy. -->
    <fieldType name="bbox" class="solr.BBoxField"
               geo="true" distanceUnits="kilometers" numberType="_bbox_coord" />
    <fieldType name="_bbox_coord" class="solr.DoublePointField"  docValues="true" stored="false"/>

    <!-- Field type for IPv4 or IPv6 addresses.  Tokenizes only on spaces, '.' or ':' characters-->
    <fieldType name="ipaddress" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <tokenizer class="solr.SimplePatternSplitTokenizerFactory" pattern="[\.\: ]+"/>
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.SimplePatternSplitTokenizerFactory" pattern="[\.\: ]+"/>
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>

</schema>
